import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer

# Load the data
data = pd.read_csv('transactions.csv')

# Ensure correct data types
data['ACCT'] = data['ACCT'].astype(str)  # Convert account number to string
data['TRAN_AMT'] = pd.to_numeric(data['TRAN_AMT'], errors='coerce')  # Ensure transaction amount is float
data['Date'] = pd.to_datetime(data['Date'])  # Convert date to datetime
data['AGE_NUM'] = data['AGE_NUM'].astype(int)  # Ensure AGE_NUM is integer
data['JOB_TITLE'] = data['JOB_TITLE'].astype(str)  # Ensure JOB_TITLE is string
data['Sector'] = data['Sector'].astype(str)  # Ensure sector is string

# Preprocessing for numerical features
numeric_features = ['TRAN_AMT', 'AGE_NUM']
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())])

# Preprocessing for categorical features
categorical_features = ['JOB_TITLE']
categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))])

# Combine preprocessing steps
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)],
    remainder='drop')  # Drop other columns not specified in numeric_features or categorical_features

# Create preprocessing and training pipeline
pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                           ('classifier', LogisticRegression(max_iter=1000, multi_class='multinomial'))])

# Define features and target
X = data.drop(['ACCT', 'Date', 'Sector'], axis=1)
y = data['Sector']

# Splitting the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
pipeline.fit(X_train, y_train)

# Predictions and Evaluation
y_pred = pipeline.predict(X_test)

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Detailed Classification Report
print(classification_report(y_test, y_pred))

# Confusion Matrix
conf_mat = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()









proc sql;
   create table highest_priority as 
   select a.*
   from your_table as a
   inner join (
       select customer_no, min(priority) as min_priority
       from your_table
       group by customer_no
   ) as b
   on a.customer_no = b.customer_no and a.priority = b.min_priority;
quit;









import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Load the data
df = pd.read_csv("IF_MAIN6.csv")

# Create a pivot table for transaction frequencies per sector
sector_frequency = df.pivot_table(
    index="ACCT",
    columns="Sector",
    values="TRAN_AMT",
    aggfunc='count',
    fill_value=0
)

# Prepare the dataset with 'Age' and 'Occupation' for encoding
# Assuming 'Age' is numerical and 'Occupation' is categorical
features_to_encode = df[['Age', 'Occupation']].drop_duplicates()
features_to_encode.index = df['ACCT'].drop_duplicates()

# One-hot encode 'Occupation' and standardize 'Age'
column_transformer = ColumnTransformer(transformers=[
    ('numerical', StandardScaler(), ['Age']),
    ('categorical', OneHotEncoder(), ['Occupation'])
], remainder='drop')

encoded_features = column_transformer.fit_transform(features_to_encode)
encoded_features_df = pd.DataFrame(encoded_features, index=features_to_encode.index)

# Combine encoded features with sector frequency data
combined_features = pd.concat([encoded_features_df, sector_frequency], axis=1, join='inner')

# Define a function to calculate cosine similarity
def calculate_cosine_similarity(data):
    similarity_matrix = cosine_similarity(data)
    return similarity_matrix

# Calculate cosine similarity matrix
cosine_similarity_matrix = calculate_cosine_similarity(combined_features)

# Display the cosine similarity matrix
print(cosine_similarity_matrix)
