We’ve built this Sales MI Dashboard in Power BI to track branch-level sales at an RM level, including key performance metrics such as product sales, trigger achievements, and more. This is designed to be a one-stop solution for the front line, offering complete visibility at a daily level.

This initiative integrates 8 different MIS reports into a single interactive dashboard, eliminating the need to access and track multiple Excel files manually.

Previously, teams had to rely on disparate Excel sheets which were time-consuming to open, analyze, and interpret on a daily basis. Based on continuous feedback from the front line, we developed this unified view to save time, reduce manual effort, and directly enhance productivity.

⸻

Next Steps (for Sharon)
Sharon, we would need the final set of inputs to complete the view. Once received, we’d be happy to schedule a detailed walkthrough of the dashboard to demonstrate its functionality and how it supports daily RM performance monitoring.












The mapping for the campaign dashboard was completed on time. However, the refresh for April 15th has not been done this month. This delay is due to unresolved issues with GupShup, specifically because SAS automated mails cannot be sent to external recipients, as confirmed by Raj.

To address this, we’ve implemented a workaround where the SAS-generated mail is received internally and then auto-forwarded to GupShup using Outlook rules. I hope this approach works smoothly and that GupShup receives the files on time without any manual intervention.

As discussed and agreed, the dashboard will be refreshed for the full month of April next week.
Could you please confirm if we are aligned on this? Also, kindly let me know if there are any queries or if further clarification is needed.

Additionally, could you please guide me on who can help with setting up the codes in Control-M?













Hi Souvik,

I connected with Bharat regarding the HML pricing data. He mentioned that the data we are currently using is incorrect and has already shared the correct dataset with you.

As per the updated file, the salary TRB amount needs to be included along with the correct SM, RM, and BAS names.

Also, could you please share with me the code or let me know if there are any pre-set codes available for their current ask?

Bharat has requested the updated output by the upcoming Monday.







%let folder_path = /your/folder/path;

%macro create_folder_if_not_exists(path);
    %if %sysfunc(fileexist(&path)) = 0 %then %do;
        options noxwait noxsync;
        x "mkdir &path";
        %put NOTE: Folder created - &path;
    %end;
    %else %do;
        %put NOTE: Folder already exists - &path;
    %end;
%mend;

%create_folder_if_not_exists(&folder_path);











/* Step 1: Clean previous data */
proc datasets lib=work nolist;
    delete backlog summary;
quit;

/* Step 2: Define paths and thresholds */
%let base_path = /sasdata/hsbc/dil/INM/IMC/external_data_transfer/GupShup/landing/inbound/;
%let unzip_path = /sasdata/hsbc/dil/INM/SASBAU/sandbox/Prachi/Sample_Check/;
%let restricted_path = /sasdata/hsbc/dil/INM/SASBAU/sandbox/Prachi/Restricted_Files/;
%let days_back = 30;
%let size_threshold = 102400; /* 100KB */

/* Step 3: Initialize log dataset */
data backlog;
    length file_date $10 file_status $25 extracted_files $100
           file_size_325 file_size_606 file_size_328 8
           formatted_size_325 formatted_size_606 formatted_size_328 $20;
    stop;
run;

/* Step 4: Macro to check files */
%macro check_email_files();
%do i = 0 %to %eval(&days_back - 1);

    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i), yymmdd10.);
    %let check_date = %sysfunc(putn(&raw_date, yymmdd10.));
    %let formatted_date = %sysfunc(tranwrd(&check_date, "-", ""));

    %let zip_filename = Email_&formatted_date..zip;
    %let extracted_folder = &unzip_path./&formatted_date;
    %let restricted_folder = &restricted_path./&formatted_date;
    %let full_zip_path = &base_path./&zip_filename;

    %let csv_325 = 325.csv;
    %let csv_606 = 606.csv;
    %let csv_328 = 328.csv;

    /* Step 5: Check ZIP file existence */
    data _null_;
        full_zip_path = resolve("&full_zip_path");
        file_exists = fileexist(full_zip_path);
        call symputx('file_found', file_exists);
    run;

    %if &file_found %then %do;

        x "mkdir -p &extracted_folder";
        x "unzip -o &full_zip_path -d &extracted_folder";
        x "mkdir -p &restricted_folder";

        x "mv &extracted_folder./&csv_325 &restricted_folder 2>/dev/null";
        x "mv &extracted_folder./&csv_606 &restricted_folder 2>/dev/null";
        x "mv &extracted_folder./&csv_328 &restricted_folder 2>/dev/null";

        /* Step 6: Verify extraction success */
        data _null_;
            extracted_path = resolve("&restricted_folder");
            extracted_exists = fileexist(extracted_path);
            call symputx('extracted_found', extracted_exists);
        run;

        %if &extracted_found %then %do;

            %let status = Valid;
            %let extracted_files = ;
            %let file_size_325 = 0;
            %let file_size_606 = 0;
            %let file_size_328 = 0;

            data _null_;
                path_325 = resolve("&restricted_folder./&csv_325");
                path_606 = resolve("&restricted_folder./&csv_606");
                path_328 = resolve("&restricted_folder./&csv_328");

                file_325_size = ifn(fileexist(path_325), fsize(fopen(path_325)), .);
                file_606_size = ifn(fileexist(path_606), fsize(fopen(path_606)), .);
                file_328_size = ifn(fileexist(path_328), fsize(fopen(path_328)), .);

                call symputx('file_size_325', file_325_size);
                call symputx('file_size_606', file_606_size);
                call symputx('file_size_328', file_328_size);
            run;

            %if &file_size_325 > 0 %then %let extracted_files = &extracted_files 325.csv;
            %if &file_size_606 > 0 %then %let extracted_files = &extracted_files 606.csv;
            %if &file_size_328 > 0 %then %let extracted_files = &extracted_files 328.csv;

            %if %length(&extracted_files) = 0 %then %let status = Missing;

            %let formatted_size_325 = %sysfunc(putn(&file_size_325, comma20.));
            %let formatted_size_606 = %sysfunc(putn(&file_size_606, comma20.));
            %let formatted_size_328 = %sysfunc(putn(&file_size_328, comma20.));

            data temp;
                file_date = "&formatted_date";
                file_status = "&status";
                extracted_files = "&extracted_files";
                file_size_325 = &file_size_325;
                file_size_606 = &file_size_606;
                file_size_328 = &file_size_328;
                formatted_size_325 = "&formatted_size_325";
                formatted_size_606 = "&formatted_size_606";
                formatted_size_328 = "&formatted_size_328";
            run;

        %end;
        %else %do;
            data temp;
                file_date = "&formatted_date";
                file_status = "Extraction Failed";
                extracted_files = "-";
                file_size_325 = .;
                file_size_606 = .;
                file_size_328 = .;
                formatted_size_325 = "";
                formatted_size_606 = "";
                formatted_size_328 = "";
            run;
        %end;

        proc append base=backlog data=temp force; run;

    %end;
    %else %do;
        data temp;
            file_date = "&formatted_date";
            file_status = "Missing";
            extracted_files = "-";
            file_size_325 = .;
            file_size_606 = .;
            file_size_328 = .;
            formatted_size_325 = "";
            formatted_size_606 = "";
            formatted_size_328 = "";
        run;

        proc append base=backlog data=temp force; run;
    %end;

%end;
%mend check_email_files;

/* Step 5: Run the macro */
%check_email_files();