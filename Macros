# Example to split and export the first two chunks of the user similarity matrix to separate sheets
with pd.ExcelWriter('user_similarity_matrix.xlsx', engine='openpyxl') as writer:
    user_similarity_df.iloc[:50000, :].to_excel(writer, sheet_name='Sheet1')  # Adjust numbers based on your needs
    user_similarity_df.iloc[50000:100000, :].to_excel(writer, sheet_name='Sheet2')  # Adjust numbers based on your needs









import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics.pairwise import cosine_similarity

# Load the dataset
df_demo = pd.read_csv('main6.csv')

# Create the interaction matrix (counts or amounts)
interaction_matrix = df_demo.pivot_table(index='ACCT', columns='Sector', values='TRAN_AMT', aggfunc='count', fill_value=0)

# Normalize the interaction matrix
scaler = MinMaxScaler()
interaction_matrix_normalized = scaler.fit_transform(interaction_matrix)

# Calculate user-to-user similarity
user_similarity = cosine_similarity(interaction_matrix_normalized)

# Convert matrices to DataFrame
accounts = interaction_matrix.index
sectors = interaction_matrix.columns
interaction_matrix_df = pd.DataFrame(interaction_matrix_normalized, index=accounts, columns=sectors)
user_similarity_df = pd.DataFrame(user_similarity, index=accounts, columns=accounts)

# Export matrices to Excel
interaction_matrix_df.to_excel('account_to_sector_matrix.xlsx', engine='openpyxl')
user_similarity_df.to_excel('user_similarity_matrix.xlsx', engine='openpyxl')










import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics.pairwise import cosine_similarity

# Load the dataset
df_demo = pd.read_csv('main6.csv')

# Create the interaction matrix
interaction_matrix = df_demo.pivot_table(index='ACCT', columns='Sector', values='TRAN_AMT', aggfunc=lambda x: len(x), fill_value=0)

# Normalize the interaction matrix
scaler = MinMaxScaler()
interaction_matrix_normalized = scaler.fit_transform(interaction_matrix)

# Calculate sector-to-sector similarity
sector_similarity = cosine_similarity(interaction_matrix_normalized.T)

# Convert to DataFrame
sectors = interaction_matrix.columns
sector_similarity_df = pd.DataFrame(sector_similarity, index=sectors, columns=sectors)

# Export to Excel
sector_similarity_df.to_excel('sector_similarity_matrix.xlsx', engine='openpyxl')









import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MinMaxScaler
from scipy.sparse import csr_matrix

# Ensure you have openpyxl installed for Excel output
# pip install openpyxl

# Load the dataset
df_demo = pd.read_csv('main6.csv')

# Preprocess the data
df_demo['DATE'] = pd.to_datetime(df_demo['DATE'])
df_demo['Day_Type'] = df_demo['DATE'].dt.dayofweek.apply(lambda x: 'Weekend' if x >= 5 else 'Weekday')

# Creating Interaction Matrices for Counts and Amounts
interaction_matrix_counts = df_demo.pivot_table(index='ACCT', columns='Sector', values='TRAN_AMT', aggfunc='count', fill_value=0)
interaction_matrix_amounts = df_demo.pivot_table(index='ACCT', columns='Sector', values='TRAN_AMT', aggfunc='sum', fill_value=0)

# Normalize the matrices using MinMaxScaler
scaler = MinMaxScaler()
interaction_matrix_counts_scaled = scaler.fit_transform(interaction_matrix_counts)
interaction_matrix_amounts_scaled = scaler.fit_transform(interaction_matrix_amounts)

# Combine the scaled matrices to create a unified interaction matrix
combined_matrix_scaled = (interaction_matrix_counts_scaled + interaction_matrix_amounts_scaled) / 2
combined_matrix_sparse = csr_matrix(combined_matrix_scaled)  # Convert to sparse matrix for efficiency

# Calculate the similarity matrix (Sector-Sector for Item-Based Collaborative Filtering)
similarity_matrix = cosine_similarity(combined_matrix_sparse.transpose(), dense_output=False)

# Function to recommend sectors based on enhanced aggregation of preferences
def recommend_sectors_enhanced(account_id, interaction_matrix_counts, interaction_matrix_amounts, similarity_matrix, n_recommendations=5):
    if account_id not in interaction_matrix_counts.index:
        return "Account not found."
    
    aggregated_counts = interaction_matrix_counts.loc[account_id] * 0.6  # Weight for counts
    aggregated_amounts = interaction_matrix_amounts.loc[account_id] * 0.4  # Weight for amounts
    aggregated_preferences = aggregated_counts + aggregated_amounts
    
    preferred_sectors = aggregated_preferences.sort_values(ascending=False).index[:n_recommendations]
    
    recommended_sectors = []
    already_recommended = set()  # To avoid repetitive recommendations
    
    for sector in preferred_sectors:
        sector_idx = list(interaction_matrix_counts.columns).index(sector)
        sector_similarities = similarity_matrix[sector_idx].toarray().flatten()
        
        for idx in sector_similarities.argsort()[-2::-1]:  # Find the next most similar sector
            most_similar_sector = interaction_matrix_counts.columns[idx]
            if most_similar_sector not in already_recommended:
                recommended_sectors.append(most_similar_sector)
                already_recommended.add(most_similar_sector)
                break
        
        if len(recommended_sectors) >= n_recommendations:  # Ensure only the top N recommendations are returned
            break
    
    return recommended_sectors

# Generate batch recommendations for all accounts
def generate_batch_recommendations(account_ids, interaction_matrix_counts, interaction_matrix_amounts, similarity_matrix, n_recommendations=5):
    recommendations = {}
    
    for account_id in account_ids:
        recommended_sectors = recommend_sectors_enhanced(account_id, interaction_matrix_counts, interaction_matrix_amounts, similarity_matrix, n_recommendations)
        recommendations[account_id] = recommended_sectors
    
    return recommendations

# Apply the batch recommendation function
account_ids = df_demo['ACCT'].unique()
batch_recommendations = generate_batch_recommendations(account_ids, interaction_matrix_counts, interaction_matrix_amounts, similarity_matrix, n_recommendations=5)

# Convert recommendations to DataFrame
recommendations_df = pd.DataFrame.from_dict(batch_recommendations, orient='index', columns=['Primary Sector', 'Secondary Sector', 'Third Sector', 'Fourth Sector', 'Fifth Sector'])

# Export to Excel
recommendations_df.to_excel('sector_recommendations.xlsx', index=True, index_label='ACCT')

print("Recommendations have been successfully saved to 'sector_recommendations.xlsx'.")












# Final Code with Excel Output Integration
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MinMaxScaler
from scipy.sparse import csr_matrix

# Load the dataset
df_demo = pd.read_csv('main6.csv')
df_demo['DATE'] = pd.to_datetime(df_demo['DATE'])
df_demo['Day_Type'] = df_demo['DATE'].dt.dayofweek.apply(lambda x: 'Weekend' if x >= 5 else 'Weekday')

# Creating and normalizing interaction matrices
interaction_matrix_counts = df_demo.pivot_table(index='ACCT', columns='Sector', values='TRAN_AMT', aggfunc='count', fill_value=0)
interaction_matrix_amounts = df_demo.pivot_table(index='ACCT', columns='Sector', values='TRAN_AMT', aggfunc='sum', fill_value=0)
scaler = MinMaxScaler()
interaction_matrix_counts_scaled = scaler.fit_transform(interaction_matrix_counts)
interaction_matrix_amounts_scaled = scaler.fit_transform(interaction_matrix_amounts)
combined_matrix_scaled = (interaction_matrix_counts_scaled + interaction_matrix_amounts_scaled) / 2
combined_matrix_sparse = csr_matrix(combined_matrix_scaled)

# Calculate the similarity matrix
similarity_matrix = cosine_similarity(combined_matrix_sparse.transpose(), dense_output=False)

# Define the enhanced recommendation function
def recommend_sectors_enhanced(account_id, ...):
    # Function body remains unchanged
    ...

# Generate batch recommendations
def generate_batch_recommendations(account_ids, ...):
    # Function body remains unchanged
    ...

# Apply the batch recommendation function
account_ids = df_demo['ACCT'].unique()
batch_recommendations = generate_batch_recommendations(account_ids, interaction_matrix_counts, interaction_matrix_amounts, similarity_matrix, n_recommendations=5)

# Convert recommendations to DataFrame
recommendations_df = pd.DataFrame.from_dict(batch_recommendations, orient='index', columns=['Primary Sector', 'Secondary Sector', 'Third Sector', 'Fourth Sector', 'Fifth Sector'])

# Export to Excel
recommendations_df.to_excel('sector_recommendations.xlsx', index=True, index_label='ACCT')

print("Recommendations have been successfully saved to 'sector_recommendations.xlsx'.")











Certainly! Below is a consolidated code snippet that includes creating a UserForm with a TextBox for the customer ID input, a CommandButton to trigger the search, and the VBA macro to search for the customer ID in a specified column. This example assumes customer IDs are stored in column A of a sheet named "Sheet1". The code will display a message box indicating whether the customer was found and on which row.

### Step 1: UserForm Code
First, ensure you've added a UserForm named `UserForm1`, a TextBox named `TextBox1`, and a CommandButton named `CommandButton1`. In the VBA Editor, double-click `UserForm1` to open its code window and add:

```vba
Private Sub CommandButton1_Click()
    SearchCustomer
End Sub
```

### Step 2: Module Code
In a new module, paste the following code:

```vba
Public Sub SearchCustomer()
    Dim ws As Worksheet
    Dim searchRange As Range
    Dim foundCell As Range
    Dim customerID As String
    
    ' Adjust these to match your setup
    Set ws = ThisWorkbook.Sheets("Sheet1") ' Change "Sheet1" to your sheet's name
    Set searchRange = ws.Range("A:A") ' Assuming customer IDs are in column A
    
    customerID = UserForm1.TextBox1.Value ' Assuming your UserForm is named UserForm1 and your TextBox is TextBox1
    
    Set foundCell = searchRange.Find(What:=customerID, LookIn:=xlValues)
    
    If Not foundCell Is Nothing Then
        ' Display full row data or do something with it
        MsgBox "Customer found in row " & foundCell.Row ' Example action
        ' Here, you could also write code to display all the details in the UserForm or elsewhere
    Else
        MsgBox "Customer ID not found."
    End If
End Sub
```

### Step 3: Showing the UserForm
To show the UserForm from Excel, add a button on your sheet and assign this macro to it:

```vba
Sub ShowSearchForm()
    UserForm1.Show
End Sub
```

To add this macro:
1. Go back to Excel.
2. On the Developer tab, click "Insert" and choose "Button" under Form Controls.
3. Draw the button on your sheet.
4. Assign the `ShowSearchForm` macro to this button.

When you click this button in Excel, `UserForm1` will appear. Enter a customer ID in `TextBox1` and click the command button to search. A message box will inform you if the customer was found and on which row.

This script is a basic example to get you started. Depending on your needs, you might want to expand it to display more detailed information about the search results directly on the UserForm or elsewhere in the workbook.
