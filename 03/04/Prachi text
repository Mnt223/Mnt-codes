data _null_;
   file mail;

   /* Start HTML */
   put '<html><body style="font-family: Arial, sans-serif; margin: 10px; font-size: 12px; color: #333;">';

   /* Email Header */
   put '<h2 style="color: #2cae50; border-bottom: 2px solid #3498db; font-size: 16px;">Non-Pega SMS File Report</h2>';

   /* Report Summary */
   put '<p style="margin: 5px 0;"><strong>Base Path:</strong> ' "&base_path" '</p>';
   put '<p style="margin: 5px 0;"><strong>Report Period:</strong> Last ' "&days_back" ' Days</p>';
   put '<p style="margin: 5px 0;"><strong>Generated:</strong> ' %sysfunc(datetime(), datetime20.) '</p>';

   /* Table Header - PRINT ONLY ONCE */
   put '<h3 style="color: #3498db; font-size: 14px;">Detailed Report</h3>';
   put '<table border="1" cellpadding="2" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 10px; font-size: 11px;">';

   /* Ensure table header is printed only once */
   put '<tr style="background-color: #3498db; color: white; font-size: 12px; text-align: left;">';
   put '<th style="padding: 6px; width: 15%;">File Date</th>';
   put '<th style="padding: 6px; width: 20%;">File Status</th>';
   put '<th style="padding: 6px; width: 15%;">File Size</th>';
   put '<th style="padding: 6px; width: 50%; word-wrap: break-word; white-space: normal; text-align:left;">Action</th>';
   put '</tr>';

   /* Read and Populate Table Data */
   do until (eof);
      set backlog_data1 end=eof;
      put '<tr style="font-size: 11px; background-color: #f9f9f9;">';
      put '<td style="padding: 6px;">' file_date '</td>';
      put '<td style="padding: 6px;">' file_status '</td>';
      put '<td style="padding: 6px;">' formatted_size '</td>';
      put '<td style="padding: 6px; word-wrap: break-word; white-space: normal; text-align:left;">' trim(left(action)) '</td>';
      put '</tr>';
   end;

   /* Close Table & HTML */
   put '</table>';
   put '</body></html>';
run;










Here is the final refined email:

Subject: RE: EXTERNAL – OSF Failure

Hi Kaja,

The LOR file shared for February 25 had the location as “WAAL TPSA” instead of “MUM TPSA”, “MUM, TPSA”, or “TPSA, MUM”. This discrepancy is the reason for the different OSF names.

Regarding the failure, we received a response from the InMoment Team confirming that the failure information was shared on February 14th, late at night, at 11:07 PM. As I was on sick leave on Monday, I connected with you on Tuesday to discuss the issue. On the same day, I retriggered the file and also forwarded the failure email to you.

Please let me know if you need any further clarification.

Best regards,
Prachi Jain
Business Analyst
[Email: prachi.jain@xxxxxx.com]

This version keeps it professional, concise, and clear. Let me know if you need any further adjustments.









Branch Growth Rank = 
VAR BranchCASAGrowth = SUM('Sales MI'[CASA_GROW])
RETURN 
IF(
    NOT(ISBLANK(BranchCASAGrowth)), 
    RANKX(
        ALLSELECTED('Branch Mapping'[BRANCH NAME]), 
        BranchCASAGrowth, 
        , 
        DESC, 
        DENSE
    )
)










/* Send HTML email report */
filename mail email &recipient_email
    subject="Server File Audit Report - Last &days_back Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body style="font-family: Arial, sans-serif; margin: 20px;">';
    
    put '<h2 style="color: #2c3e50; border-bottom: 2px solid #3498db;">';
    put "Server File Audit Report";
    put '</h2>';
    
    put '<div style="margin-bottom: 30px;">';
    put "<p><strong>Base Path:</strong> &base_path</p>";
    put "<p><strong>Report Period:</strong> Last &days_back Days</p>";
    put "<p><strong>Generated:</strong> %sysfunc(datetime(), datetime20.)</p>";
    put '</div>';
    
    put '<h3 style="color: #34495e;">Detailed Report</h3>';
    put '<table border="1" style="border-collapse: collapse; width: 100%; margin-bottom: 30px;">';

    /* Print the header row once */
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>File Status</th><th>File Size</th></tr>';

    /* Loop through backlog dataset */
    do until (eof);
        set backlog end=eof;
        put '<tr>';
        put '<td style="padding: 8px;">' file_date '</td>';
        put '<td style="padding: 8px;">' file_status '</td>';
        put '<td style="padding: 8px;">' formatted_size '</td>';
        put '</tr>';
    end;
    
    put '</table>';
    put '</body></html>';
run;














/* Send HTML email report */
filename mail email &recipient_email
    subject="Server File Audit Report - Last &days_back Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body style="font-family: Arial, sans-serif; margin: 20px;">';
    
    put '<h2 style="color: #2c3e50; border-bottom: 2px solid #3498db;">';
    put "Server File Audit Report";
    put '</h2>';
    
    put '<div style="margin-bottom: 30px;">';
    put "<p><strong>Base Path:</strong> &base_path</p>";
    put "<p><strong>Report Period:</strong> Last &days_back Days</p>";
    put "<p><strong>Generated:</strong> %sysfunc(datetime(), datetime20.)</p>";
    put '</div>';
    
    put '<h3 style="color: #34495e;">Detailed Report</h3>';
    put '<table border="1" style="border-collapse: collapse; width: 100%; margin-bottom: 30px;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>File Status</th><th>File Size</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put '<tr>';
        put '<td style="padding: 8px;">' file_date '</td>';
        put '<td style="padding: 8px;">' file_status '</td>';
        put '<td style="padding: 8px;">' formatted_size '</td>';
        put '</tr>';
    end;
    
    put '</table>';
    put '</body></html>';
run;

/* DELETE EXTRACTED FILES AFTER PROCESSING */
x "rm -rf &unzip_path";








tst
data _null_;
    test_file = "/sasdata/inm/mnt/test.txt";
    rc = filename('test', test_file);
    fid = fopen('test', 'W');
    if fid > 0 then do;
        put 'Write test: Success';
        rc = fclose(fid);
    end;
    else put 'Error: ' sysmsg();
    rc = filename('test');
run;









%let base_path = /data/skdn/kffkfkfkd/;  /* Server path containing ZIP files */
%let days_back = 45;                     /* Number of days to check */
%let size_threshold = 102400;            /* 100 KB threshold */
%let recipient_email = your.email@domain.com;

/* Clear previous data */
proc delete data=backlog; run;
proc delete data=summary; run;

/* Initialize dataset */
data backlog;
    length file_date $10 file_status $25 file_size 8;
    stop;
run;

%macro check_zips;

%do i = 0 %to %eval(&days_back - 1);
    /* Generate date string */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddd10.);
    %let zip_path = &base_path.&check_date..zip;

    %put #########################################;
    %put Checking ZIP: &zip_path;

    /* File existence check */
    data _null_;
        file_exists = fileexist("&zip_path");
        if file_exists then do;
            file_id = fopen("&zip_path", 'I', 'B');  /* Binary mode */
            if file_id > 0 then do;
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                put "ERROR: Could not open file";
                call symputx('file_exists', 0);
            end;
        end;
        else do;
            call symputx('file_exists', 0);
        end;
    run;

    %if &file_exists %then %do;
        /* ZIP validation */
        %let valid_zip = 0;
        filename inzip ZIP "&zip_path";

        data _null_;
            fid = fopen('inzip');
            if fid > 0 then do;
                call symputx('valid_zip', 1);
                rc = fclose(fid);
            end;
            rc = filename('inzip');
        run;

        /* Determine status */
        %let status=;
        %if &valid_zip %then %let status=Valid;
        %else %let status=Corrupt;
        
        %if &file_size < &size_threshold %then %let status=&status (Below Threshold);

        data temp;
            file_date = "&check_date";
            file_status = "&status";
            file_size = &file_size;
        run;
        proc append base=backlog data=temp; run;
    %end;
    %else %do;
        data temp;
            file_date = "&check_date";
            file_status = "Missing";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;
%mend;

%check_zips;

/* Create summary statistics */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status = 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send HTML email report */
filename mail email &recipient_email
    subject="Daily ZIP File Report - Last &days_back Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body style="font-family: Arial, sans-serif;">';
    put '<h2 style="color: #2c3e50;">ZIP File Status Report</h2>';
    put "<p><strong>Location:</strong> &base_path</p>";
    put "<p><strong>Date Range:</strong> %sysfunc(intnx(day, %sysfunc(today()), -&days_back +1, b), yymmddd10.) to %sysfunc(today(), yymmddd10.)</p>";
    
    put '<h3 style="color: #34495e;">Daily Status</h3>';
    put '<table border="1" cellpadding="5" style="border-collapse: collapse;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>Status</th><th>File Size</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put '<tr>';
        put '<td>' file_date '</td>';
        put '<td>' file_status '</td>';
        put '<td>' file_size '</td>';
        put '</tr>';
    end;
    put '</table>';
    
    put '<h3 style="color: #34495e; margin-top: 20px;">Summary</h3>';
    put '<table border="1" cellpadding="5" style="border-collapse: collapse;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>Valid</th><th>Missing</th><th>Corrupt</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put '<tr>';
        put '<td>' file_date '</td>';
        put '<td>' Valid_Files '</td>';
        put '<td>' Missing_Files '</td>';
        put '<td>' Corrupt_Files '</td>';
        put '<td>' Size_Warnings '</td>';
        put '</tr>';
    end;
    put '</table>';
    put '</body></html>';
run;












tt
%let base_path = /data/skdn/kffkfkfkd/;  /* Server path - end with / */
%let days_back = 45;                     /* Days to check (0 to T-44) */
%let size_threshold = 102400;            /* 100 KB threshold */
%let recipient_email = your.email@domain.com;

/* Delete previous datasets */
proc delete data=backlog; run;
proc delete data=summary; run;

/* Initialize dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $25 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1);
    /* Generate date-based folder name */
    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b));
    %let check_date = %sysfunc(putn(&raw_date, yymmddd10.)); /* YYYY-MM-DD */
    %let folder_path = %sysfunc(catx(/,"&base_path","&check_date"));
    %let file_name = &check_date..zip;

    /* Debugging output */
    %put #########################################;
    %put RAW DATE: &raw_date;
    %put FOLDER PATH: &folder_path;
    %put FILE NAME: &file_name;
    
    /* 1. Folder existence check with path verification */
    data _null_;
        /* Resolve environment variables if any */
        resolved_path = resolve("&folder_path");
        
        /* Verify path exists */
        folder_exists = fileexist(resolved_path);
        put "Resolved path: " resolved_path;
        put "Folder exists: " folder_exists;
        
        /* Check directory contents */
        if folder_exists then do:
            rc = filename('dir', resolved_path);
            dir_id = dopen('dir');
            if dir_id > 0 then do:
                put "First 3 files:";
                do i = 1 to min(dnum(dir_id),3);
                    put "  " dread(dir_id,i);
                end;
                rc = dclose(dir_id);
            end;
            rc = filename('dir');
        end;
        
        call symputx('folder_found', folder_exists);
    run;

    %if &folder_found %then %do;
        /* 2. File check with explicit server path */
        data _null_;
            full_path = resolve(catx(/, "&folder_path", "&file_name"));
            put "Full file path: " full_path;
            
            file_exists = fileexist(full_path);
            if file_exists then do:
                /* Check file accessibility */
                file_id = fopen(full_path, 'I', 'B');
                if file_id > 0 then do:
                    file_size = fsize(file_id);
                    rc = fclose(file_id);
                    call symputx('file_size', file_size);
                    call symputx('file_exists', 1);
                    put "File accessible. Size:" file_size "bytes";
                end;
                else do:
                    put "ERROR: File exists but cannot be opened";
                    call symputx('file_exists', 0);
                end;
            end;
            else do:
                put "File not found";
                call symputx('file_exists', 0);
            end;
        run;

        /* Rest of the logic... */
        
%mend;

%check_files;

/* Rest of reporting code... */






%if &folder_found %then %do;
    /* Extract ZIP File */
    filename sftpzip sftp "/your/sftp/directory/&check_date..zip"
        host="sftp.yourdomain.com"
        user="your_username"
        pass="your_password";

    filename localzip "/sas/temp/&check_date..zip";

    /* Copy ZIP to local SAS folder */
    data _null_;
        infile sftpzip;
        file localzip;
        input;
        put _infile_;
    run;

    /* Unzip the file */
    x "unzip -o /sas/temp/&check_date..zip -d /sas/temp/&check_date./";

    /* Set new folder path */
    %let folder_path = /sas/temp/&check_date./;
%end;









mnt
%let base_path = \\server\share\archive\;  /* UNC path - update this */
%let days_back = 45;                      /* 0 to 44 days */
%let size_threshold = 102400;             /* 100KB threshold */
%let recipient_email = your.email@domain.com; /* Update email */

/* Delete previous data */
proc delete data=backlog; run;
proc delete data=summary; run;

/* Initialize dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $25 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1);
    /* Generate date components */
    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b));
    %let check_date = %sysfunc(putn(&raw_date, yymmddd10.));
    
    /* Construct server paths */
    %let folder_path = %sysfunc(translate(&base_path.%sysfunc(putn(&raw_date, yymmddd10.)), '/', '\'));
    %let file_name = %sysfunc(putn(&raw_date, yymmddd10.))..zip;

    /* Debugging output */
    %put #########################################;
    %put Checking: &folder_path;
    %put Looking for: &file_name;
    
    /* 1. Folder existence check */
    data _null_;
        length resolved_path $512;
        resolved_path = resolve("&folder_path");
        folder_exists = fileexist(resolved_path);
        call symputx('folder_found', folder_exists);
    run;

    %if &folder_found %then %do;
        /* 2. File existence & size check */
        data _null_;
            length full_path $512;
            full_path = resolve(catx('\', "&folder_path", "&file_name"));
            
            file_exists = fileexist(full_path);
            
            if file_exists then do;
                file_id = fopen(full_path, 'I', 'B', 'recfm=n');
                if file_id > 0 then do;
                    file_size = fsize(file_id);
                    rc = fclose(file_id);
                    call symputx('file_size', file_size);
                    call symputx('file_exists', 1);
                end;
                else do;
                    call symputx('file_exists', 0);
                    call symputx('file_size', 0);
                end;
            end;
            else do;
                call symputx('file_exists', 0);
                call symputx('file_size', 0);
            end;
        run;

        %if not &file_exists %then %do;
            /* Case 1: File missing */
            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* 3. ZIP validation */
            %let valid_zip = 0;
            filename inzip ZIP "&folder_path/&file_name";

            data _null_;
                rc = filename('inzip', "&folder_path/&file_name");
                fid = fopen('inzip');
                if fid > 0 then do;
                    call symputx('valid_zip', 1);
                    rc = fclose(fid);
                end;
                rc = filename('inzip');
            run;

            /* Determine final status */
            %let status=;
            %if &valid_zip %then %let status=Valid;
            %else %let status=Corrupt;
            
            %if &file_size < &size_threshold %then %let status=&status (Below Threshold);

            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Case 2: Folder missing */
        data temp;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;
%mend;

%check_files;

/* Create summary statistics */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when folder_status = 'Exists' then 1 else 0 end) as Folders_Exist,
        sum(case when folder_status = 'Missing' then 1 else 0 end) as Folders_Missing,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status = 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send HTML email report */
filename mail email &recipient_email
    subject="Server File Audit Report - Last &days_back Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body style="font-family: Arial, sans-serif; margin: 20px;">';
    
    put '<h2 style="color: #2c3e50; border-bottom: 2px solid #3498db;">';
    put "Server File Audit Report";
    put '</h2>';
    
    put '<div style="margin-bottom: 30px;">';
    put "<p><strong>Base Path:</strong> &base_path</p>";
    put "<p><strong>Report Period:</strong> Last &days_back Days</p>";
    put "<p><strong>Generated:</strong> %sysfunc(datetime(), datetime20.)</p>";
    put '</div>';
    
    put '<h3 style="color: #34495e;">Daily Status Details</h3>';
    put '<table border="1" style="border-collapse: collapse; width: 100%; margin-bottom: 30px;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>Folder Status</th><th>File Status</th><th>File Size</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put '<tr>';
        put '<td style="padding: 8px;">' file_date '</td>';
        put '<td style="padding: 8px;">' folder_status '</td>';
        put '<td style="padding: 8px;">' file_status '</td>';
        put '<td style="padding: 8px;">' file_size '</td>';
        put '</tr>';
    end;
    
    put '</table>';
    
    put '<h3 style="color: #34495e;">Summary Statistics</h3>';
    put '<table border="1" style="border-collapse: collapse; width: 100%;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>Folders Exist</th><th>Folders Missing</th><th>Valid Files</th>';
    put '<th>Missing Files</th><th>Corrupt Files</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put '<tr>';
        put '<td style="padding: 8px;">' file_date '</td>';
        put '<td style="padding: 8px; text-align: center;">' Folders_Exist '</td>';
        put '<td style="padding: 8px; text-align: center;">' Folders_Missing '</td>';
        put '<td style="padding: 8px; text-align: center;">' Valid_Files '</td>';
        put '<td style="padding: 8px; text-align: center;">' Missing_Files '</td>';
        put '<td style="padding: 8px; text-align: center;">' Corrupt_Files '</td>';
        put '<td style="padding: 8px; text-align: center;">' Size_Warnings '</td>';
        put '</tr>';
    end;
    
    put '</table>';
    put '</body></html>';
run;















66


%let base_path = /your/sas/directory/; /* Update this with your base directory */
%let days_back = 45; /* Number of days to check (0 to -44 for 45 days total) */
%let size_threshold = 102400; /* 100 KB in bytes */

proc delete data=backlog; run;

/* Initialize backlog dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $50 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1); /* Loop from T-0 to T-44 */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddd10.);
    %let folder_path = &base_path.&check_date./;
    %let file_name = &check_date..csv;

    /* Step 1: Check if the unzipped folder exists using dopen() */
    data _null_;
        folder_id = dopen("&folder_path");
        if folder_id > 0 then folder_exists = 1;
        else folder_exists = 0;
        call symputx('folder_found', folder_exists);
    run;

    %put Folder Path: &folder_path;
    %put Folder Found: &folder_found;

    %if &folder_found %then %do;
        /* Step 2: Check if the file exists */
        data _null_;
            length fullpath $256;
            fullpath = "&folder_path.&file_name";
            file_exists = fileexist(fullpath);
            
            if file_exists then do;
                file_id = fopen(fullpath, 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                call symputx('file_size', 0);
                call symputx('file_exists', 0);
            end;
        run;

        %put File Path: &folder_path.&file_name;
        %put File Found: &file_exists;
        %put File Size: &file_size;

        %if not &file_exists %then %do;
            data temp;
                length file_date $10 folder_status $20 file_status $20;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* Step 3: Check if file is readable and meets size threshold */
            data _null_;
                infile "&folder_path.&file_name" eof=eof;
                rc = 0;
                input;
                return;
                
                eof:
                rc = 1;
                call symputx('file_valid', rc);
                stop;
            run;

            %if &file_valid %then %do;
                %let status=Valid;
            %end;
            %else %do;
                %let status=Corrupt;
            %end;

            %if &file_size < &size_threshold %then %do;
                %let status=&status (Below Threshold);
            %end;

            data temp;
                length file_date $10 folder_status $20 file_status $50;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Step 4: Folder is missing */
        data temp;
            length file_date $10 folder_status $20 file_status $20;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;

%mend check_files;

%check_files;

/* Create a proper summary dataset */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when folder_status = 'Exists' then 1 else 0 end) as Folders_Exist,
        sum(case when folder_status = 'Missing' then 1 else 0 end) as Folders_Missing,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status contains 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send an email with backlog details */
filename mail email 'your_email@domain.com'
    subject="Folder & File Check Report - Last 45 Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body>';
    put '<h2>Folder & File Check Report - Last 45 Days (T-0 to T-44)</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folder Status</th><th>File Status</th><th>File Size (bytes)</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put "<tr><td>" file_date "</td><td>" folder_status "</td><td>" file_status "</td><td>" file_size "</td></tr>";
    end;
    
    put '</table>';
    
    put '<h2>Summary</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folders Exist</th><th>Folders Missing</th><th>Valid Files</th><th>Missing Files</th><th>Corrupt Files</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put "<tr><td>" file_date "</td><td>" Folders_Exist "</td><td>" Folders_Missing "</td><td>" Valid_Files "</td><td>" Missing_Files "</td><td>" Corrupt_Files "</td><td>" Size_Warnings "</td></tr>";
    end;
    
    put '</table></body></html>';
run;









data _null_;
    rc1 = filename('test', "\\server\share\archive\known_file.zip");
    rc2 = fopen('test');
    if rc2 > 0 then do;
        put "SUCCESS: File accessible";
        rc3 = fclose(rc2);
    end;
    else put "ERROR: " sysmsg();
    rc4 = filename('test');
run;










4
%let base_path = /your/base/path/;  /* Must end with slash */
%let days_back = 45;
%let size_threshold = 102400;

/* Initialize dataset */
proc delete data=backlog; run;

data backlog;
    length file_date $10 folder_status $20 file_status $20 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1);
    /* Use hyphens in date format */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddd10.);
    %let folder_path = &base_path.%sysfunc(translate(&check_date,_,:-));  /* Replace : with _ */
    %let file_name = &check_date..zip;

    /* Debugging output */
    %put #########################################;
    %put Checking path: &folder_path;
    %put Looking for file: &file_name;
    
    /* Folder existence check */
    data _null_;
        folder_exists = fileexist("&folder_path");
        call symputx('folder_found', folder_exists);
        put "Folder exists: " folder_exists;
    run;

    %if &folder_found %then %do;
        /* File check */
        data _null_;
            full_path = "&folder_path/&file_name";  /* Added slash between folder and file */
            file_exists = fileexist(full_path);
            
            if file_exists then do;
                file_id = fopen(full_path, 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                call symputx('file_size', 0);
                call symputx('file_exists', 0);
            end;
            put "File exists: " file_exists;
        run;

        /* Rest of your existing logic */
        %if not &file_exists %then %do;
            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* ZIP validation logic */
            %let valid_zip = 0;
            filename inzip ZIP "&folder_path/&file_name";

            data _null_;
                rc = filename('inzip', "&folder_path/&file_name");
                fid = fopen('inzip');
                if fid > 0 then do;
                    call symputx('valid_zip', 1);
                    rc = fclose(fid);
                end;
                rc = filename('inzip');
            run;

            %if &valid_zip %then %let status=Valid;
            %else %let status=Corrupt;

            %if &file_size < &size_threshold %then %let status=&status (Below Threshold);

            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        data temp;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;
%mend;

%check_files;








%let base_path = /mnt/data/archive/;  /* MUST end with slash */
%let check_date = %sysfunc(today(), yymmddn8.); /* Current date as YYYYMMDD */

/* Diagnostic Path Check */
%put #############################################;
%put Diagnostic Check for Date: &check_date;
%put #############################################;

%let full_path = &base_path.&check_date;

data _null_;
    /* Basic existence check */
    folder_exists = fileexist("&full_path");
    put "Basic Existence Check: " folder_exists=;
    
    /* Detailed access verification */
    rc1 = filename('diag', "&full_path");
    diag_fid = dopen('diag');
    
    if diag_fid > 0 then do;
        put "Directory Access Granted";
        put "Contents:";
        
        /* List first 5 files */
        do i = 1 to min(5, dnum(diag_fid));
            fname = dread(diag_fid, i);
            put "  " fname=;
        end;
        
        rc2 = dclose(diag_fid);
    end;
    else do;
        put "Access Error: " sysmsg=;
    end;
    
    rc3 = filename('diag');
run;











%let base_path = /your/sas/directory/; /* Update this with your base directory */
%let days_back = 45; /* Number of days to check (0 to -44 for 45 days total) */
%let size_threshold = 102400; /* 100 KB in bytes */

proc delete data=backlog; run;

/* Initialize backlog dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $20 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1); /* Loop from T-0 to T-44 */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddn8.);
    %let folder_path = &base_path.&check_date./;
    %let file_name = &check_date..csv;
    
    /* Step 1: Check if the unzipped folder exists */
    data _null_;
        folder_exists = fileexist("&folder_path");
        call symputx('folder_found', folder_exists);
    run;

    %if &folder_found %then %do;
        /* Step 2: Check if the file exists */
        data _null_;
            length fullpath $256;
            fullpath = "&folder_path.&file_name";
            file_exists = fileexist(fullpath);
            
            if file_exists then do;
                file_id = fopen(fullpath, 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                call symputx('file_size', 0);
                call symputx('file_exists', 0);
            end;
        run;

        %if not &file_exists %then %do;
            data temp;
                length file_date $10 folder_status $20 file_status $20;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* Step 3: Check if file is readable and meets size threshold */
            data _null_;
                infile "&folder_path.&file_name" eof=eof;
                rc = 0;
                input;
                put _infile_;
                return;
                
                eof:
                rc = 1;
                call symputx('file_valid', rc);
                stop;
            run;

            %if &file_valid %then %do;
                %let status=Valid;
            %end;
            %else %do;
                %let status=Corrupt;
            %end;

            %if &file_size < &size_threshold %then %do;
                %let status=&status (Below Threshold);
            %end;

            data temp;
                length file_date $10 folder_status $20 file_status $50;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Step 4: Folder is missing */
        data temp;
            length file_date $10 folder_status $20 file_status $20;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;

%mend check_files;

%check_files;

/* Create a proper summary dataset */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when folder_status = 'Exists' then 1 else 0 end) as Folders_Exist,
        sum(case when folder_status = 'Missing' then 1 else 0 end) as Folders_Missing,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status contains 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send an email with backlog details */
filename mail email 'your_email@domain.com'
    subject="Folder & File Check Report - Last 45 Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body>';
    put '<h2>Folder & File Check Report - Last 45 Days (T-0 to T-44)</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folder Status</th><th>File Status</th><th>File Size (bytes)</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put "<tr><td>" file_date "</td><td>" folder_status "</td><td>" file_status "</td><td>" file_size "</td></tr>";
    end;
    
    put '</table>';
    
    put '<h2>Summary</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folders Exist</th><th>Folders Missing</th><th>Valid Files</th><th>Missing Files</th><th>Corrupt Files</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put "<tr><td>" file_date "</td><td>" Folders_Exist "</td><td>" Folders_Missing "</td><td>" Valid_Files "</td><td>" Missing_Files "</td><td>" Corrupt_Files "</td><td>" Size_Warnings "</td></tr>";
    end;
    
    put '</table></body></html>';
run;
