Hi Smriti,

As discussed, I have already refreshed the base from my end. The campaign dashboard is scheduled to be refreshed tomorrow morning between 9-11 AM, as we have aligned on multiple times.

I have consistently been proactive in responding and have shared all necessary emails related to the campaign dashboard. Since the refresh is scheduled for tomorrow, there was no immediate need to update the executives today, which is why I didn‚Äôt forward the email. As always, I verify the numbers and formatting after every refresh before sharing the final update with everyone.

Additionally, as per our discussion, I was supposed to receive the mapping on the 4th but only received it on the 17th, which was already past the scheduled refresh timeline for that day.

Alongside this task, I have also been managing my regular BAU and ad-hoc activities in parallel to ensure all deliverables are met without any delays.







Status_Icon = 
IF([MTD_Acct_Login_Change_Percent] > 100, "üèÜ", "‚ö†Ô∏è")




Selected_Metric = 
VAR SelectedValue = SELECTEDVALUE(MetricSelector[Metric Selection])
RETURN 
SWITCH(
    TRUE(),
    SelectedValue = "CASA Growth", SUM(YourTable[CASA_Growth]),
    SelectedValue = "TMD Growth", SUM(YourTable[TMD_Growth]),
    SelectedValue = "FACS Volume", SUM(YourTable[FACS_Volume]),
    SelectedValue = "GBGT Count", SUM(YourTable[GBGT_Count]),
    SelectedValue = "GBGT Volume", SUM(YourTable[GBGT_Volume])
)



Subject: Follow-up on Activity MIS and Dashboard Discussion

Dear Anil,

I hope you are doing well.

As we discussed last Wednesday, I had shared the initial version of the Activity MIS, and we explored further enhancements for the dashboard. Since I was on leave from last Thursday, I will be working on those additions today.

Additionally, I would appreciate it if you could schedule a meeting on Tuesday so that we can further discuss the dashboard and align on the next steps.






















Here‚Äôs a more professional and polite version of the email:

Subject: Assistance Required for Sales MI Dashboard, Sales Revenue, and TM1 Reporting

Hi Kaustov,

I hope you‚Äôre doing well.

I wanted to follow up regarding a few points:
	1.	Sales MI Dashboard ‚Äì We are currently using DBMIS, Balance Growth, and Activity MI. As per my discussion with Anil, it was confirmed that the planner file is provided by you. Could you please help in getting the planner file, along with its location and update frequency?
	2.	Sales Revenue ‚Äì As almost 80% of the product updates have been completed with the new logic, there are still pending updates for TPSA, CC, and PILs for Digital. The discussions regarding CC are still ongoing with Bishit. Please let me know if any further inputs are required from my side.
	3.	TM1 Reporting ‚Äì Since this month‚Äôs reporting has not been published yet, could you please guide me on how we should proceed, considering that the product logic is still incomplete in sales revenue? Your guidance would be greatly appreciated.

Looking forward to your response. Please let me know if any clarification is needed.

Best regards,
Prachi Jain
Business Analyst
Email: prachi.jain@noexternalmail.hsbc.com

This version is more structured, polite, and professional while maintaining clarity. Let me know if you need any further refinements!








import pandas as pd
import numpy as np

# Function to compute PSI between two datasets
def psi(X, Y):
    # Assigning pentiles (bins) to the score column
    X['pentile'] = pd.qcut(X['score'], 5, labels=False) + 1

    # Finding boundary conditions for each pentile
    X_tile = X.groupby("pentile")['score'].agg([np.min, np.max]).reset_index()
    X_tile.columns = ['pentile', 'min', 'max']

    # Fixing lowest and highest values for min and max
    X_tile.loc[0, 'min'] = -np.inf  # Use -inf instead of an arbitrary small number
    X_tile.loc[len(X_tile)-1, 'max'] = np.inf  # Use inf instead of an arbitrary large number

    # Debugging: Check bin boundaries
    print("\nX_tile (Bin Boundaries):")
    print(X_tile)

    # Fix bin edges by ensuring order and removing duplicates
    bin_edges = sorted(set(X_tile["min"].tolist() + [X_tile["max"].iloc[-1]]))  # Ensure strictly increasing order

    # Debugging: Check bin edges before applying pd.cut
    print("Fixed Bin Edges:", bin_edges)

    # Apply pd.cut() with corrected bins
    Y["pentile"] = pd.cut(Y["score"], bins=bin_edges, labels=X_tile["pentile"], include_lowest=True)

    # Counting occurrences per pentile in X and Y
    X_counts = X.groupby('pentile').size().reset_index(name='X_count')
    Y_counts = Y.groupby("pentile").size().reset_index(name="Y_count")

    # Merging with total counts
    X_total = len(X)
    Y_total = len(Y)

    X_counts['X_perc'] = X_counts['X_count'] / X_total
    Y_counts['Y_perc'] = Y_counts['Y_count'] / Y_total

    # Merging with pentile boundaries
    psi_df = X_counts.merge(Y_counts, on="pentile", how="left").merge(X_tile, on="pentile", how="left")

    # Handling missing values in Y_perc to avoid NaN-related errors in np.log()
    psi_df["Y_perc"].fillna(1e-10, inplace=True)  # Assign small non-zero value to prevent log(0)

    # Calculating PSI
    psi_df['psi'] = (psi_df['X_perc'] - psi_df['Y_perc']) * np.log(psi_df['X_perc'] / psi_df['Y_perc'])

    # Formatting score_band to match required output
    psi_df["score_band"] = psi_df["min"].astype(int).astype(str) + "-" + psi_df["max"].astype(int).astype(str)

    # Adjust first and last row labels
    psi_df.loc[psi_df.index[0], "score_band"] = "low-" + str(int(psi_df.loc[psi_df.index[0], "max"]))
    psi_df.loc[psi_df.index[-1], "score_band"] = str(int(psi_df.loc[psi_df.index[-1], "min"])) + "-high"

    return psi_df[['score_band', 'X_perc', 'Y_perc', 'psi']]


# Function to calculate pentile distribution for a dataset
def pentile_calculation(data, bin_edges, col_name):
    # Assign pentile bands based on corrected bins
    data["pentile_band"] = pd.cut(
        data["score"], bins=bin_edges, labels=range(1, len(bin_edges)), include_lowest=True
    )

    # Ensure 'samplingweight' column exists
    if "samplingweight" not in data.columns:
        data["samplingweight"] = 1

    # Calculate the percentage of observations in each pentile band
    pentile_summary = data.groupby("pentile_band")["samplingweight"].sum().reset_index()
    pentile_summary[col_name] = (pentile_summary["samplingweight"] / data["samplingweight"].sum()) * 100

    # Rename columns for clarity
    pentile_summary = pentile_summary[["pentile_band", col_name]]

    return pentile_summary


# Function to generate a PSI table between training and validation datasets
def psi_table(dev_data, val_data):
    # Convert column names to lowercase for consistency
    dev_data.columns = dev_data.columns.str.lower()
    val_data.columns = val_data.columns.str.lower()

    # Handling missing "samplingweight" column
    if "samplingweight" not in dev_data.columns:
        dev_data["samplingweight"] = 1
    if "samplingweight" not in val_data.columns:
        val_data["samplingweight"] = 1

    # Assigning pentiles based on score
    dev_data["pentile"] = pd.qcut(dev_data["score"], 5, labels=False) + 1

    # Finding boundary conditions for each pentile
    dev_tile = dev_data.groupby("pentile")["score"].agg([np.min, np.max]).reset_index()
    dev_tile.columns = ["pentile", "min", "max"]

    # Fixing lowest and highest values
    dev_tile.loc[0, "min"] = -np.inf
    dev_tile.loc[len(dev_tile)-1, "max"] = np.inf

    # Debugging check for dev_tile
    print("\nDevelopment Tile Boundaries:")
    print(dev_tile)

    # Fix bin edges by ensuring order and removing duplicates
    bin_edges = sorted(set(dev_tile["min"].tolist() + [dev_tile["max"].iloc[-1]]))  # Ensure strictly increasing order

    # Debugging: Check bin edges before applying pd.cut
    print("Fixed Bin Edges:", bin_edges)

    # Apply pd.cut() with corrected bins
    val_data["pentile"] = pd.cut(val_data["score"], bins=bin_edges, labels=dev_tile["pentile"], include_lowest=True)

    # Debugging: Check pentile distribution
    print("Pentile Distribution in val_data:")
    print(val_data["pentile"].value_counts())

    # Counting occurrences per pentile in dev and val data
    dev_pentile_summary = pentile_calculation(dev_data, bin_edges, "development_perc")
    val_pentile_summary = pentile_calculation(val_data, bin_edges, "review_perc")

    # Merging pentile summaries with dev_tile
    pentile_summary = dev_tile.merge(dev_pentile_summary, on="pentile", how="inner")
    pentile_summary = pentile_summary.merge(val_pentile_summary, on="pentile", how="inner")

    # Formatting score bands
    pentile_summary["score_band"] = pentile_summary["min"].astype(int).astype(str) + "-" + pentile_summary["max"].astype(int).astype(str)

    # Adjust first and last row labels
    pentile_summary.loc[pentile_summary.index[0], "score_band"] = "low-" + str(int(pentile_summary.loc[pentile_summary.index[0], "max"]))
    pentile_summary.loc[pentile_summary.index[-1], "score_band"] = str(int(pentile_summary.loc[pentile_summary.index[-1], "min"])) + "-high"

    # PSI Calculation
    pentile_summary["psi"] = (pentile_summary["development_perc"] - pentile_summary["review_perc"]) * \
                             np.log(pentile_summary["development_perc"] / pentile_summary["review_perc"])

    # Sorting by pentile index
    pentile_summary.sort_values(by="pentile", ascending=True, inplace=True)

    return pentile_summary[["score_band", "development_perc", "review_perc", "psi"]]


# Compute PSI between training and test data
psi_train_test = psi_table(scr_train, scr_test)

# Print Final PSI Table
print("\nFinal PSI Table:")
print(psi_train_test)

# Print total PSI score
print('\nTotal PSI - scr_train vs scr_test:', round(psi_train_test['psi'].sum(), 2))















Here‚Äôs a professional and polite email response you can use:

Subject: Re: KT Session Request

Dear [Teammate‚Äôs Name],

Thank you for reaching out. I appreciate the opportunity to be part of this KT session. However, at the moment, my bandwidth is fully occupied with existing deliverables that are critical and time-sensitive.

Taking on additional tasks or participating in the KT session would require me to deprioritize some of these urgent commitments, which is not feasible at this stage. Given the current workload, I would like to discuss with [Manager‚Äôs Name] how we can best manage these priorities while ensuring all critical deadlines are met.

[Manager‚Äôs Name], I would appreciate your guidance on how to navigate this so that we can find a feasible way forward. Please let me know how you‚Äôd like to proceed.

Looking forward to your thoughts.

Best regards,
[Your Name]

This keeps your tone professional and constructive while clearly communicating your constraints. Let me know if you‚Äôd like any refinements!








/* Delete previous data */
proc datasets lib=work nolist;
    delete backlog summary;
quit;

/* Define Paths */
%let base_path = /sasdata/hsbc/dil/INM/IMCE/external_data_transfer/GupShup/landing/inbound/;
%let unzip_path = /sasdata/hsbc/dil/INM/IM/SASBAU/sandbox/Prachi/Sample_Check/;
%let restricted_path = /sasdata/hsbc/dil/INM/IM/SASBAU/sandbox/Prachi/Restricted_Files/;
%let days_back = 30;
%let size_threshold = 102400; /* 100KB threshold */

/* Initialize dataset */
data backlog;
    length file_date $10 file_status $25 file_size_325 8 file_size_606 8 
           formatted_size_325 $20 formatted_size_606 $20 extracted_files $100;
    stop;
run;

/* Macro for Email ZIP file processing */
%macro check_email_files;

%do i = 0 %to %eval(&days_back - 1);

    /* Generate the date in DD_MM_YY format */
    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b));
    %let day_part = %sysfunc(putn(&raw_date, day2.));
    %let month_part = %sysfunc(putn(&raw_date, month2.));
    %let year_part = %sysfunc(putn(&raw_date, year4.));
    %let short_year = %substr(&year_part,3,2); /* Extract last two digits of the year */
    %let check_date = &day_part._&month_part._&short_year;

    /* Construct file paths */
    %let zip_filename = Email_&check_date..zip;
    %let extracted_folder = &unzip_path./&check_date;
    %let restricted_folder = &restricted_path./&check_date;
    %let full_zip_path = &base_path./&zip_filename;

    /* Define expected CSV filenames */
    %let csv_325 = 325.csv;
    %let csv_606 = 606.csv;

    /* Check if ZIP file exists */
    data _null_;
        length full_zip_path $512;
        full_zip_path = resolve("&full_zip_path");
        file_exists = fileexist(full_zip_path);
        call symputx('file_found', file_exists);
    run;

    %if &file_found %then %do;
        /* Unzipping the file */
        x "mkdir -p &extracted_folder"; /* Ensure directory exists */
        x "unzip -o &full_zip_path -d &extracted_folder";

        /* Ensure restricted folder exists */
        x "mkdir -p &restricted_folder";

        /* Move restricted files to the restricted folder */
        x "mv &extracted_folder./&csv_325 &restricted_folder/ 2>/dev/null";
        x "mv &extracted_folder./&csv_606 &restricted_folder/ 2>/dev/null";

        /* Verify extraction */
        data _null_;
            length extracted_path $512;
            extracted_path = resolve("&extracted_folder");
            extracted_exists = fileexist(extracted_path);
            call symputx('extracted_found', extracted_exists);
        run;

        %if &extracted_found %then %do;
            /* Initialize variables */
            %let status = Valid;
            %let file_size_325 = 0;
            %let file_size_606 = 0;
            %let extracted_files = ;

            /* Check file sizes for 325.csv and 606.csv */
            data _null_;
                length path_325 path_606 $512;
                path_325 = resolve("&restricted_folder./&csv_325");
                path_606 = resolve("&restricted_folder./&csv_606");

                file_325_size = ifn(fileexist(path_325), fsize(fopen(path_325)), .);
                file_606_size = ifn(fileexist(path_606), fsize(fopen(path_606)), .);

                call symputx('file_size_325', file_325_size);
                call symputx('file_size_606', file_606_size);
            run;

            /* If files exist, add them to extracted_files */
            %if &file_size_325 > 0





/* Delete previous data */
proc datasets lib=work nolist;
    delete backlog summary;
quit;

/* Define Paths */
%let base_path = /sasdata/hsbc/dil/INM/IMCE/external_data_transfer/GupShup/landing/inbound/;
%let unzip_path = /sasdata/hsbc/dil/INM/IM/SASBAU/sandbox/Prachi/Sample_Check/;
%let restricted_path = /sasdata/hsbc/dil/INM/IM/SASBAU/sandbox/Prachi/Restricted_Files/;
%let days_back = 30;
%let size_threshold = 102400; /* 100KB threshold */

/* Initialize dataset */
data backlog;
    length file_date $10 file_status $25 file_size_325 8 file_size_606 8 formatted_size_325 $20 formatted_size_606 $20 extracted_files $100;
    stop;
run;

/* Macro for Email ZIP file processing */
%macro check_email_files;

%do i = 0 %to %eval(&days_back - 1);

    /* Generate the date in YYYY_MM_DD format */
    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b));
    %let check_date = %sysfunc(putn(&raw_date, yymmdd10.));
    %let formatted_date = %sysfunc(tranwrd(&check_date, "-", "_")); /* Convert YYYY-MM-DD to YYYY_MM_DD */

    /* Construct file paths */
    %let zip_filename = Email_&formatted_date..zip;
    %let extracted_folder = &unzip_path./&formatted_date;
    %let restricted_folder = &restricted_path./&formatted_date;
    %let full_zip_path = &base_path./&zip_filename;

    /* Define expected CSV filenames */
    %let csv_325 = 325.csv;
    %let csv_606 = 606.csv;

    /* Check if ZIP file exists */
    data _null_;
        length full_zip_path $512;
        full_zip_path = resolve("&full_zip_path");
        file_exists = fileexist(full_zip_path);
        call symputx('file_found', file_exists);
    run;

    %if &file_found %then %do;
        /* Unzipping the file */
        x "mkdir -p &extracted_folder"; /* Ensure directory exists */
        x "unzip -o &full_zip_path -d &extracted_folder";

        /* Ensure restricted folder exists */
        x "mkdir -p &restricted_folder";

        /* Move restricted files to the restricted folder */
        x "mv &extracted_folder./&csv_325 &restricted_folder/ 2>/dev/null";
        x "mv &extracted_folder./&csv_606 &restricted_folder/ 2>/dev/null";

        /* Verify extraction */
        data _null_;
            length extracted_path $512;
            extracted_path = resolve("&extracted_folder");
            extracted_exists = fileexist(extracted_path);
            call symputx('extracted_found', extracted_exists);
        run;

        %if &extracted_found %then %do;
            /* Initialize variables */
            %let valid_zip = 1;
            %let status = Valid;
            %let file_size_325 = 0;
            %let file_size_606 = 0;
            %let extracted_files = ;

            /* Check file sizes for 325.csv and 606.csv */
            data _null_;
                length path_325 path_606 $512;
                path_325 = resolve("&restricted_folder./&csv_325");
                path_606 = resolve("&restricted_folder./&csv_606");

                file_325_size = ifn(fileexist(path_325), fsize(fopen(path_325)), .);
                file_606_size = ifn(fileexist(path_606), fsize(fopen(path_606)), .);

                call symputx('file_size_325', file_325_size);
                call symputx('file_size_606', file_606_size);
            run;

            /* If files exist, add them to extracted_files */
            %if &file_size_325 > 0 %then %let extracted_files = catx(", ", &extracted_files, "325.csv");
            %if &file_size_606 > 0 %then %let extracted_files = catx(", ", &extracted_files, "606.csv");

            %if &extracted_files = %then %do;
                %let status = Missing;
            %end;

            /* Convert file sizes to readable format */
            %let formatted_size_325 = %sysfunc(ifc(&file_size_325 > 1073741824, %sysfunc(catx(" ", %sysevalf(&file_size_325/1073741824, 0.01), "GB")), 
                                    %sysfunc(ifc(&file_size_325 > 1048576, %sysfunc(catx(" ", %sysevalf(&file_size_325/1048576, 0.01), "MB")), 
                                    %sysfunc(ifc(&file_size_325 > 1024, %sysfunc(catx(" ", %sysevalf(&file_size_325/1024, 0.01), "KB")), 
                                    %sysfunc(ifc(&file_size_325 > 0, %sysfunc(catx(" ", &file_size_325, "Bytes")), "-"))))))));

            %let formatted_size_606 = %sysfunc(ifc(&file_size_606 > 1073741824, %sysfunc(catx(" ", %sysevalf(&file_size_606/1073741824, 0.01), "GB")), 
                                    %sysfunc(ifc(&file_size_606 > 1048576, %sysfunc(catx(" ", %sysevalf(&file_size_606/1048576, 0.01), "MB")), 
                                    %sysfunc(ifc(&file_size_606 > 1024, %sysfunc(catx(" ", %sysevalf(&file_size_606/1024, 0.01), "KB")), 
                                    %sysfunc(ifc(&file_size_606 > 0, %sysfunc(catx(" ", &file_size_606, "Bytes")), "-"))))))));

            /* Append file status */
            data temp;
                file_date = "&formatted_date";
                file_status = "&status";
                extracted_files = "&extracted_files";
                file_size_325 = &file_size_325;
                formatted_size_325 = "&formatted_size_325";
                file_size_606 = &file_size_606;
                formatted_size_606 = "&formatted_size_606";
            run;

            proc append base=backlog data=temp; run;

        %end;
        %else %do;
            /* Case: Extraction failed */
            data temp;
                file_date = "&formatted_date";
                file_status = "Extraction Failed";
                extracted_files = "";
                file_size_325 = .;
                file_size_606 = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Case: File missing */
        data temp;
            file_date = "&formatted_date";
            file_status = "Missing";
            extracted_files = "";
            file_size_325 = .;
            file_size_606 = .;
        run;
        proc append base=backlog data=temp; run;
    %end;

%end;

%mend check_email_files;

/* Run the macro */
%check_email_files;










/* Delete previous data */
proc datasets lib=work nolist;
    delete backlog summary;
quit;

/* Define Paths */
%let base_path = /sasdata/hsbc/dil/INM/IMCE/external_data_transfer/GupShup/landing/inbound/;
%let unzip_path = /sasdata/hsbc/dil/INM/IM/SASBAU/sandbox/Prachi/Sample_Check/;
%let days_back = 30;
%let size_threshold = 102400; /* 100KB threshold */

/* Initialize dataset */
data backlog;
    length file_date $10 file_status $25 file_size 8 formatted_size $20 extracted_files $100;
    stop;
run;

/* Macro for Email ZIP file processing */
%macro check_email_files;

%do i = 0 %to %eval(&days_back - 1);

    /* Generate the date in YYYY_MM_DD format */
    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b));
    %let check_date = %sysfunc(putn(&raw_date, yymmdd10.));
    %let formatted_date = %sysfunc(tranwrd(&check_date, "-", "_")); /* Convert YYYY-MM-DD to YYYY_MM_DD */

    /* Construct file paths */
    %let zip_filename = Email_&formatted_date..zip;
    %let extracted_folder = &unzip_path./&formatted_date;
    %let full_zip_path = &base_path./&zip_filename;

    /* Define expected CSV filenames */
    %let csv_325 = 325.csv;
    %let csv_606 = 606.csv;

    /* Check if ZIP file exists */
    data _null_;
        length full_zip_path $512;
        full_zip_path = resolve("&full_zip_path");
        file_exists = fileexist(full_zip_path);
        call symputx('file_found', file_exists);
    run;

    %if &file_found %then %do;
        /* Unzipping the file */
        x "mkdir -p &extracted_folder"; /* Ensure directory exists */
        x "unzip -o &full_zip_path -d &extracted_folder";

        /* Verify extraction */
        data _null_;
            length extracted_path $512;
            extracted_path = resolve("&extracted_folder");
            extracted_exists = fileexist(extracted_path);
            call symputx('extracted_found', extracted_exists);
        run;

        %if &extracted_found %then %do;
            /* Initialize variables */
            %let valid_zip = 1;
            %let status = Valid;
            %let file_size = 0;
            %let extracted_files = ;

            /* Check if specific CSV files exist */
            %let extracted_325 = 0;
            %let extracted_606 = 0;

            data _null_;
                length extracted_path_325 extracted_path_606 $512;
                extracted_path_325 = resolve("&extracted_folder./&csv_325");
                extracted_path_606 = resolve("&extracted_folder./&csv_606");

                extracted_325_exists = fileexist(extracted_path_325);
                extracted_606_exists = fileexist(extracted_path_606);

                call symputx('extracted_325', extracted_325_exists);
                call symputx('extracted_606', extracted_606_exists);
            run;

            %if &extracted_325 %then %let extracted_files = catx(", ", &extracted_files, "325.csv");
            %if &extracted_606 %then %let extracted_files = catx(", ", &extracted_files, "606.csv");

            %if &extracted_files = %then %do;
                %let status = Missing;
            %end;

            /* Get extracted folder size */
            data _null_;
                infile "du -sb &extracted_folder" pipe;
                input extracted_size 8.;
                call symputx('file_size', extracted_size);
            run;

            /* Check file size threshold */
            %if %sysevalf(&file_size < &size_threshold) %then %let status = &status (Below Threshold);

            /* Append file status */
            data temp;
                file_date = "&formatted_date";
                file_status = "&status";
                extracted_files = "&extracted_files";
                file_size = &file_size;
            run;

            proc append base=backlog data=temp; run;

        %end;
        %else %do;
            /* Case: Extraction failed */
            data temp;
                file_date = "&formatted_date";
                file_status = "Extraction Failed";
                extracted_files = "";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Case: File missing */
        data temp;
            file_date = "&formatted_date";
            file_status = "Missing";
            extracted_files = "";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;

%end;

%mend check_email_files;

/* Run the macro */
%check_email_files;

/* Convert file size to KB, MB, or GB */
data backlog;
    set backlog;
    if file_size > 1073741824 then formatted_size = catx(" ", round(file_size/1073741824, 0.01), "GB");
    else if file_size > 1048576 then formatted_size = catx(" ", round(file_size/1048576, 0.01), "MB");
    else if file_size > 1024 then formatted_size = catx(" ", round(file_size/1024, 0.01), "KB");
    else if file_size > 0 then formatted_size = catx(" ", file_size, "Bytes");
    else formatted_size = "-";
run;

/* Generate Summary Statistics */
data backlog1 (drop=file_size);
    set backlog;
    if file_status = "Missing" then action = "Alert: Missing File - Repush Required";
    else if file_status = "Valid" then action = "Valid File - No Action";
    else if index(file_status, "Corrupt") > 0 then action = "Alert: File Size - Repush Required";
    else action = "Check Required";
run;

/* Create summary statistics */
proc sql;
    create table summary as
    select
        file_date,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status = 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when index(file_status, 'Corrupt') > 0 then 1 else 0 end) as Corrupt_Files,
        sum(case when index(file_status, 'Threshold') > 0 then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;







/* Delete previous data */
proc datasets lib=work nolist;
    delete backlog summary;
quit;

/* Define Paths */
%let base_path = /sasdata/hsbc/dil/INM/IMCE/external_data_transfer/GupShup/landing/inbound/;
%let unzip_path = /sasdata/hsbc/dil/INM/IM/SASBAU/sandbox/Prachi/Sample_Check/;
%let days_back = 30;
%let size_threshold = 102400; /* 100KB threshold */

/* Initialize dataset */
data backlog;
    length file_date $10 file_status $25 file_size 8 formatted_size $20 extracted_files $100;
    stop;
run;

/* Macro for Email ZIP file processing */
%macro check_email_files;

%do i = 0 %to %eval(&days_back - 1);

    /* Generate the date in DD_MM_YY format */
    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b));
    %let day_part = %sysfunc(putn(&raw_date, day2.));
    %let month_part = %sysfunc(putn(&raw_date, month2.));
    %let year_part = %sysfunc(putn(&raw_date, year4.));
    %let short_year = %substr(&year_part,3,2);
    %let check_date = &day_part._&month_part._&short_year;

    /* Construct file paths */
    %let zip_filename = Email_&check_date..zip;
    %let extracted_folder = &unzip_path./&check_date;
    %let full_zip_path = &base_path./&zip_filename;

    /* Define expected CSV filenames */
    %let csv_325 = 325.csv;
    %let csv_606 = 606.csv;

    /* Check if ZIP file exists */
    data _null_;
        length full_zip_path $512;
        full_zip_path = resolve("&full_zip_path");
        file_exists = fileexist(full_zip_path);
        call symputx('file_found', file_exists);
    run;

    %if &file_found %then %do;
        /* Unzipping the file */
        x "mkdir -p &extracted_folder"; /* Ensure directory exists */
        x "unzip -o &full_zip_path -d &extracted_folder";

        /* Verify extraction */
        data _null_;
            length extracted_path $512;
            extracted_path = resolve("&extracted_folder");
            extracted_exists = fileexist(extracted_path);
            call symputx('extracted_found', extracted_exists);
        run;

        %if &extracted_found %then %do;
            /* Initialize variables */
            %let valid_zip = 1;
            %let status = Valid;
            %let file_size = 0;
            %let extracted_files = ;

            /* Check if specific CSV files exist */
            %let extracted_325 = 0;
            %let extracted_606 = 0;

            data _null_;
                length extracted_path_325 extracted_path_606 $512;
                extracted_path_325 = resolve("&extracted_folder./&csv_325");
                extracted_path_606 = resolve("&extracted_folder./&csv_606");

                extracted_325_exists = fileexist(extracted_path_325);
                extracted_606_exists = fileexist(extracted_path_606);

                call symputx('extracted_325', extracted_325_exists);
                call symputx('extracted_606', extracted_606_exists);
            run;

            %if &extracted_325 %then %let extracted_files = catx(", ", &extracted_files, "325.csv");
            %if &extracted_606 %then %let extracted_files = catx(", ", &extracted_files, "606.csv");

            %if &extracted_files = %then %do;
                %let status = Missing;
            %end;

            /* Get extracted folder size */
            data _null_;
                infile "du -sb &extracted_folder" pipe;
                input extracted_size 8.;
                call symputx('file_size', extracted_size);
            run;

            /* Check file size threshold */
            %if %sysevalf(&file_size < &size_threshold) %then %let status = &status (Below Threshold);

            /* Append file status */
            data temp;
                file_date = "&check_date";
                file_status = "&status";
                extracted_files = "&extracted_files";
                file_size = &file_size;
            run;

            proc append base=backlog data=temp; run;

        %end;
        %else %do;
            /* Case: Extraction failed */
            data temp;
                file_date = "&check_date";
                file_status = "Extraction Failed";
                extracted_files = "";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Case: File missing */
        data temp;
            file_date = "&check_date";
            file_status = "Missing";
            extracted_files = "";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;

%end;

%mend check_email_files;

/* Run the macro */
%check_email_files;

/* Convert file size to KB, MB, or GB */
data backlog;
    set backlog;
    if file_size > 1073741824 then formatted_size = catx(" ", round(file_size/1073741824, 0.01), "GB");
    else if file_size > 1048576 then formatted_size = catx(" ", round(file_size/1048576, 0.01), "MB");
    else if file_size > 1024 then formatted_size = catx(" ", round(file_size/1024, 0.01), "KB");
    else if file_size > 0 then formatted_size = catx(" ", file_size, "Bytes");
    else formatted_size = "-";
run;

/* Generate Summary Statistics */
data backlog1 (drop=file_size);
    set backlog;
    if file_status = "Missing" then action = "Alert: Missing File - Repush Required";
    else if file_status = "Valid" then action = "Valid File - No Action";
    else if index(file_status, "Corrupt") > 0 then action = "Alert: File Size - Repush Required";
    else action = "Check Required";
run;

/* Create summary statistics */
proc sql;
    create table summary as
    select
        file_date,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status = 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when index(file_status, 'Corrupt') > 0 then 1 else 0 end) as Corrupt_Files,
        sum(case when index(file_status, 'Threshold') > 0 then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;








%macro check_email_files(days_back=30);

%do i = 0 %to %eval(&days_back - 1);

    /* Generate the date in DD_MM_YY format */
    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b));
    %let day_part = %sysfunc(putn(&raw_date, day2.));
    %let month_part = %sysfunc(putn(&raw_date, month2.));
    %let year_part = %sysfunc(putn(&raw_date, year4.));
    %let short_year = %substr(&year_part,3,2);
    %let check_date = &day_part._&month_part._&short_year;

    /* Construct file paths */
    %let zip_filename = Email_&check_date..zip;
    %let zip_folder = &base_path;
    %let extracted_folder = &unzip_path./&check_date;
    %let full_zip_path = &zip_folder./&zip_filename;

    /* Define expected CSV filenames */
    %let csv_325 = 325.csv;
    %let csv_606 = 606.csv;

    /* Check if ZIP file exists */
    data _null_;
        length full_zip_path $512;
        full_zip_path = resolve("&full_zip_path");
        file_exists = fileexist(full_zip_path);
        call symputx('file_found', file_exists);
    run;

    %if &file_found %then %do;
        /* Unzipping the file */
        x "mkdir -p &extracted_folder"; /* Ensure directory exists */
        x "unzip -o &full_zip_path -d &extracted_folder";

        /* Validate CSV Files */
        %let extracted_325 = 0;
        %let extracted_606 = 0;
        %let extracted_count = 0;

        data _null_;
            length extracted_path_325 extracted_path_606 $512;
            extracted_path_325 = resolve("&extracted_folder./&csv_325");
            extracted_path_606 = resolve("&extracted_folder./&csv_606");

            extracted_325_exists = fileexist(extracted_path_325);
            extracted_606_exists = fileexist(extracted_path_606);

            extracted_count = extracted_325_exists + extracted_606_exists;

            call symputx('extracted_325', extracted_325_exists);
            call symputx('extracted_606', extracted_606_exists);
            call symputx('extracted_count', extracted_count);
        run;

        /* Prepare dataset */
        data temp;
            length file_date $10 file_status $25 file_size 8 extracted_files $50;
            file_date = "&check_date";
            extracted_files = "";

            %if &extracted_325 %then %do;
                extracted_files = catx(", ", extracted_files, "325.csv");
            %end;
            %if &extracted_606 %then %do;
                extracted_files = catx(", ", extracted_files, "606.csv");
            %end;

            if extracted_files ne "" then file_status = "Valid";
            else file_status = "Missing";

            file_size = 0;
        run;

        proc append base=backlog data=temp; run;

        %put NOTE: File &zip_filename processed. Status: &file_status. Extracted Files: &extracted_files;
    %end;
    %else %do;
        data temp;
            file_date = "&check_date";
            file_status = "Missing";
            extracted_files = "";
            file_size = .;
        run;

        proc append base=backlog data=temp; run;
        %put ERROR: ZIP file &zip_filename not found in &zip_folder.;
    %end;

%end;

%mend check_email_files;

/* Define Paths */
%let base_path = /sasdata/path/to/zip/files;
%let unzip_path = /sasdata/path/to/extracted/files;

/* Run the macro for Email processing */
%check_email_files(days_back=30);







filename mymail email
   to=("recipient@example.com") /* Replace with actual recipient */
   from="noreply@example.com" /* Replace with actual sender */
   subject="Non-Pega SMS File Report - Last &days_back Days"
   content_type="text/html";

data _null_;
   file mymail;

   /* Start HTML */
   put '<html><body style="font-family: Arial, sans-serif; margin: 10px; font-size: 12px; color: #333;">';

   /* Email Header */
   put '<h2 style="color: #2cae50; border-bottom: 2px solid #3498db; font-size: 20px;">Non-Pega SMS File Report</h2>';

   /* Report Summary - Each in a Separate Row */
   put '<p style="margin: 5px 0; font-size: 14px;"><strong>Base Path:</strong> <span style="font-size: 13px; color: #555;">' "&base_path" '</span></p>';
   put '<p style="margin: 5px 0; font-size: 14px;"><strong>Report Period:</strong> <span style="font-size: 13px; color: #555;">Last ' "&days_back" ' Days</span></p>';
   put '<p style="margin: 5px 0; font-size: 14px;"><strong>Generated:</strong> <span style="font-size: 13px; color: #555;">' %sysfunc(putn(%sysfunc(datetime()), datetime20.)) '</span></p>';

   /* Table Header */
   put '<h3 style="color: #3498db; font-size: 16px;">Detailed Report</h3>';
   put '<table border="1" cellpadding="3" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 10px; font-size: 11px;">';

   /* Table Headers */
   put '<tr style="background-color: #3498db; color: white; font-size: 12px; text-align: left;">';
   put '<th style="padding: 6px; width: 15%;">File Date</th>';
   put '<th style="padding: 6px; width: 20%;">File Status</th>';
   put '<th style="padding: 6px; width: 15%;">File Size</th>';
   put '<th style="padding: 6px; width: 50%;">Action</th>';
   put '</tr>';

   /* Loop through dataset and apply conditional formatting */
   do until (eof);
      set backlog_data1 end=eof;

      /* Define inline style for red text */
      if file_status = "Missing" or file_status = "Below Threshold" then do;
         put '<tr style="font-size: 11px;">';
         put '<td style="padding: 6px; color: red; font-weight: bold;">' file_date '</td>';
         put '<td style="padding: 6px; color: red; font-weight: bold;"><strong>' file_status '</strong></td>';
         put '<td style="padding: 6px; color: red; font-weight: bold;">' formatted_size '</td>';
         put '<td style="padding: 6px; color: red; font-weight: bold;">' action '</td>';
         put '</tr>';
      end;
      else do;
         put '<tr style="font-size: 11px;">';
         put '<td style="padding: 6px;">' file_date '</td>';
         put '<td style="padding: 6px;">' file_status '</td>';
         put '<td style="padding: 6px;">' formatted_size '</td>';
         put '<td style="padding: 6px;">' action '</td>';
         put '</tr>';
      end;
   end;

   /* Close Table & HTML */
   put '</table>';
   put '</body></html>';
run;






filename mymail email
   to=("recipient@example.com") /* Replace with actual recipient */
   from="noreply@example.com" /* Replace with actual sender */
   subject="Non-Pega SMS File Report - Last &days_back Days"
   content_type="text/html";

data _null_;
   file mymail;

   /* Start HTML */
   put '<html><body style="font-family: Arial, sans-serif; margin: 10px; font-size: 12px; color: #333;">';

   /* Email Header */
   put '<h2 style="color: #2cae50; border-bottom: 2px solid #3498db; font-size: 20px;">Non-Pega SMS File Report</h2>';

   /* Report Summary - Each in a Separate Row */
   put '<p style="margin: 5px 0; font-size: 14px;"><strong>Base Path:</strong> <span style="font-size: 13px; color: #555;">' "&base_path" '</span></p>';
   put '<p style="margin: 5px 0; font-size: 14px;"><strong>Report Period:</strong> <span style="font-size: 13px; color: #555;">Last ' "&days_back" ' Days</span></p>';
   put '<p style="margin: 5px 0; font-size: 14px;"><strong>Generated:</strong> <span style="font-size: 13px; color: #555;">' %sysfunc(putn(%sysfunc(datetime()), datetime20.)) '</span></p>';

   /* Table Header */
   put '<h3 style="color: #3498db; font-size: 16px;">Detailed Report</h3>';
   put '<table border="1" cellpadding="3" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 10px; font-size: 11px;">';

   /* Table Headers */
   put '<tr style="background-color: #3498db; color: white; font-size: 12px; text-align: left;">';
   put '<th style="padding: 6px; width: 15%;">File Date</th>';
   put '<th style="padding: 6px; width: 20%;">File Status</th>';
   put '<th style="padding: 6px; width: 15%;">File Size</th>';
   put '<th style="padding: 6px; width: 50%;">Action</th>';
   put '</tr>';

   /* Loop through dataset and apply conditional formatting */
   do until (eof);
      set backlog_data1 end=eof;

      /* Apply Red Font Color for Entire Row if Issue Exists */
      if file_status = "Missing" or file_status = "Below Threshold" then 
         call symputx("text_style", "<span style=""color: red; font-weight: bold;"">");
      else 
         call symputx("text_style", "<span>");

      /* Print the row */
      put '<tr style="font-size: 11px;">';
      put '<td style="padding: 6px;">' "&text_style" file_date '</span></td>';
      put '<td style="padding: 6px;">' "&text_style" file_status '</span></td>';
      put '<td style="padding: 6px;">' "&text_style" formatted_size '</span></td>';
      put '<td style="padding: 6px;">' "&text_style" action '</span></td>';
      put '</tr>';
   end;

   /* Close Table & HTML */
   put '</table>';
   put '</body></html>';
run;










data _null_;
   file mail;

   /* Start HTML */
   put '<html><body style="font-family: Arial, sans-serif; margin: 10px; font-size: 12px; color: #333;">';

   /* Email Header */
   put '<h2 style="color: #2cae50; border-bottom: 2px solid #3498db; font-size: 20px;">Non-Pega SMS File Report</h2>';

   /* Report Summary - Each Detail in a Separate Row */
   put '<p style="margin: 5px 0; font-size: 14px;"><strong>Base Path:</strong> <span style="font-size: 13px; color: #555;">' "&base_path" '</span></p>';
   put '<p style="margin: 5px 0; font-size: 14px;"><strong>Report Period:</strong> <span style="font-size: 13px; color: #555;">Last ' "&days_back" ' Days</span></p>';
   put '<p style="margin: 5px 0; font-size: 14px;"><strong>Generated:</strong> <span style="font-size: 13px; color: #555;">' %sysfunc(putn(%sysfunc(datetime()), datetime20.)) '</span></p>';

   /* Table Header */
   put '<h3 style="color: #3498db; font-size: 16px;">Detailed Report</h3>';
   put '<table border="1" cellpadding="3" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 10px; font-size: 11px;">';

   /* Table Headers */
   put '<tr style="background-color: #3498db; color: white; font-size: 12px; text-align: left;">';
   put '<th style="padding: 6px; width: 15%;">File Date</th>';
   put '<th style="padding: 6px; width: 20%;">File Status</th>';
   put '<th style="padding: 6px; width: 15%;">File Size</th>';
   put '<th style="padding: 6px; width: 50%;">Action</th>';
   put '</tr>';

   /* Loop through dataset and apply conditional formatting */
   do until (eof);
      set backlog_data1 end=eof;

      /* Define row background color based on condition */
      if file_status = "Missing" or file_status = "Below Threshold" then 
         call symputx("row_color", "#FFCCCC"); /* Entire row in Red */
      else 
         call symputx("row_color", "#f9f9f9"); /* Normal Row Background */

      /* Print the row with appropriate background color */
      put '<tr style="font-size: 11px; background-color:' "&row_color" ';">';
      put '<td style="padding: 6px; background-color:' "&row_color" ';">' file_date '</td>';
      put '<td style="padding: 6px; background-color:' "&row_color" ';"><strong>' file_status '</strong></td>';
      put '<td style="padding: 6px; background-color:' "&row_color" ';">' formatted_size '</td>';
      put '<td style="padding: 6px; background-color:' "&row_color" ';">' action '</td>';
      put '</tr>';
   end;

   /* Close Table & HTML */
   put '</table>';
   put '</body></html>';
run;














data _null_;
   file mail;

   /* Start HTML */
   put '<html><body style="font-family: Arial, sans-serif; margin: 10px; font-size: 12px; color: #333;">';

   /* Email Header */
   put '<h2 style="color: #2cae50; border-bottom: 2px solid #3498db; font-size: 20px;">Non-Pega SMS File Report</h2>';

   /* Table Header */
   put '<h3 style="color: #3498db; font-size: 16px;">Detailed Report</h3>';
   put '<table border="1" cellpadding="3" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 10px; font-size: 11px;">';

   /* Table Headers */
   put '<tr style="background-color: #3498db; color: white; font-size: 12px; text-align: left;">';
   put '<th style="padding: 6px; width: 15%;">File Date</th>';
   put '<th style="padding: 6px; width: 20%;">File Status</th>';
   put '<th style="padding: 6px; width: 15%;">File Size</th>';
   put '<th style="padding: 6px; width: 50%;">Action</th>';
   put '</tr>';

   /* Loop through dataset and apply conditional formatting */
   do until (eof);
      set backlog_data1 end=eof;

      /* Define row background color based on condition */
      if file_status = "Missing" or file_status = "Below Threshold" then 
         call symputx("row_color", "#FFCCCC"); /* Entire row in Red */
      else 
         call symputx("row_color", "#f9f9f9"); /* Normal Row Background */

      /* Print the row with appropriate background color */
      put '<tr style="font-size: 11px; background-color:' "&row_color" ';">';
      put '<td style="padding: 6px; background-color:' "&row_color" ';">' file_date '</td>';
      put '<td style="padding: 6px; background-color:' "&row_color" ';"><strong>' file_status '</strong></td>';
      put '<td style="padding: 6px; background-color:' "&row_color" ';">' formatted_size '</td>';
      put '<td style="padding: 6px; background-color:' "&row_color" ';">' action '</td>';
      put '</tr>';
   end;

   /* Close Table & HTML */
   put '</table>';
   put '</body></html>';
run;















data _null_;
   file mail;

   /* Start HTML */
   put '<html><body style="font-family: Arial, sans-serif; margin: 10px; font-size: 12px; color: #333;">';

   /* Report Header */
   put '<h2 style="color: #2cae50; border-bottom: 2px solid #3498db; font-size: 20px;">Non-Pega SMS File Report</h2>';

   /* Table Header */
   put '<h3 style="color: #3498db; font-size: 16px;">Detailed Report</h3>';
   put '<table border="1" cellpadding="3" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 10px; font-size: 11px;">';

   /* Table Headers */
   put '<tr style="background-color: #3498db; color: white; font-size: 12px; text-align: left;">';
   put '<th style="padding: 6px; width: 15%;">File Date</th>';
   put '<th style="padding: 6px; width: 20%;">File Status</th>';
   put '<th style="padding: 6px; width: 15%;">File Size</th>';
   put '<th style="padding: 6px; width: 50%; word-wrap: break-word; white-space: normal; text-align:left;">Action</th>';
   put '</tr>';

   /* Loop through dataset and apply conditional formatting */
   do until (eof);
      set backlog_data1 end=eof;

      /* Define row background color based on condition */
      if file_status = "Missing" or file_status = "Below Threshold" then 
         call symputx("row_color", "#FFCCCC"); /* Light Red Background */
      else 
         call symputx("row_color", "#f9f9f9"); /* Normal Row Background */

      /* Print the row with appropriate background color */
      put '<tr style="font-size: 11px; background-color:' "&row_color" ';">';
      put '<td style="padding: 6px;">' file_date '</td>';
      put '<td style="padding: 6px;"><strong>' file_status '</strong></td>';
      put '<td style="padding: 6px;">' formatted_size '</td>';

      /* Apply red text only for action column if needed */
      if file_status = "Missing" or file_status = "Below Threshold" then 
         put '<td style="padding: 6px; color: red; font-weight: bold; word-wrap: break-word; white-space: normal; text-align:left;">' trim(left(action)) '</td>';
      else 
         put '<td style="padding: 6px; word-wrap: break-word; white-space: normal; text-align:left;">' trim(left(action)) '</td>';

      put '</tr>';
   end;

   /* Close Table & HTML */
   put '</table>';
   put '</body></html>';
run;









data _null_;
   file mail;

   /* Start HTML */
   put '<html><body style="font-family: Arial, sans-serif; margin: 10px; font-size: 12px; color: #333;">';

   /* Email Header */
   put '<h2 style="color: #2cae50; border-bottom: 2px solid #3498db; font-size: 18px;">Non-Pega SMS File Report</h2>';

   /* Report Summary - Combined in One Line (FIXED) */
   put '<p style="margin: 5px 0; font-size: 14px;">';
   put '<strong>Base Path:</strong> <span style="font-size: 13px; color: #555;">' "&base_path" '</span>';
   put ' &nbsp;|&nbsp; ';
   put '<strong>Report Period:</strong> <span style="font-size: 13px; color: #555;">Last ' "&days_back" ' Days</span>';
   put ' &nbsp;|&nbsp; ';
   put '<strong>Generated:</strong> <span style="font-size: 13px; color: #555;">' %sysfunc(putn(%sysfunc(datetime()), datetime20.)) '</span>';
   put '</p>';

   /* Table Header - PRINT ONLY ONCE */
   put '<h3 style="color: #3498db; font-size: 16px;">Detailed Report</h3>';
   put '<table border="1" cellpadding="2" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 10px; font-size: 11px;">';

   /* Ensure table header is printed only once */
   put '<tr style="background-color: #3498db; color: white; font-size: 12px; text-align: left;">';
   put '<th style="padding: 6px; width: 15%;">File Date</th>';
   put '<th style="padding: 6px; width: 20%;">File Status</th>';
   put '<th style="padding: 6px; width: 15%;">File Size</th>';
   put '<th style="padding: 6px; width: 50%; word-wrap: break-word; white-space: normal; text-align:left;">Action</th>';
   put '</tr>';

   /* Read and Populate Table Data */
   do until (eof);
      set backlog_data1 end=eof;

      /* Apply red background color if File Size is Missing or Below Threshold */
      if file_status = "Missing" or file_status = "Below Threshold" then do;
         put '<tr style="font-size: 11px; background-color: #FFCCCC;">'; /* Light Red Background */
         put '<td style="padding: 6px;">' file_date '</td>';
         put '<td style="padding: 6px; color: black;"><strong>' file_status '</strong></td>'; /* Keep readable */
         put '<td style="padding: 6px;">' formatted_size '</td>';
         put '<td style="padding: 6px; color: red; font-weight: bold; word-wrap: break-word; white-space: normal; text-align:left;">' trim(left(action)) '</td>'; /* Keep Action in Red */
         put '</tr>';
      end;
      else do;
         put '<tr style="font-size: 11px; background-color: #f9f9f9;">'; /* Normal Row Background */
         put '<td style="padding: 6px;">' file_date '</td>';
         put '<td style="padding: 6px;">' file_status '</td>';
         put '<td style="padding: 6px;">' formatted_size '</td>';
         put '<td style="padding: 6px; word-wrap: break-word; white-space: normal; text-align:left;">' trim(left(action)) '</td>';
         put '</tr>';
      end;
   end;

   /* Close Table & HTML */
   put '</table>';

   /* Total Records Section */
   put '<p style="margin-top: 10px; font-size: 14px;"><strong>Total Records:</strong> <span style="font-size: 13px; color: #555;">' total_records '</span></p>';

   put '</body></html>';
run;






data _null_;
   file mail;

   /* Start HTML */
   put '<html><body style="font-family: Arial, sans-serif; margin: 10px; font-size: 12px; color: #333;">';

   /* Email Header */
   put '<h2 style="color: #2cae50; border-bottom: 2px solid #3498db; font-size: 18px;">Non-Pega SMS File Report</h2>';

   /* Report Summary - Combined in One Line */
   put '<p style="margin: 5px 0; font-size: 14px;">';
   put '<strong>Base Path:</strong> <span style="font-size: 13px; color: #555;">' "&base_path" '</span> &nbsp;|&nbsp; ';
   put '<strong>Report Period:</strong> <span style="font-size: 13px; color: #555;">Last ' "&days_back" ' Days</span> &nbsp;|&nbsp; ';
   put '<strong>Generated:</strong> <span style="font-size: 13px; color: #555;">' %sysfunc(datetime(), datetime20.) '</span>';
   put '</p>';

   /* Table Header - PRINT ONLY ONCE */
   put '<h3 style="color: #3498db; font-size: 16px;">Detailed Report</h3>';
   put '<table border="1" cellpadding="2" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 10px; font-size: 11px;">';

   /* Ensure table header is printed only once */
   put '<tr style="background-color: #3498db; color: white; font-size: 12px; text-align: left;">';
   put '<th style="padding: 6px; width: 15%;">File Date</th>';
   put '<th style="padding: 6px; width: 20%;">File Status</th>';
   put '<th style="padding: 6px; width: 15%;">File Size</th>';
   put '<th style="padding: 6px; width: 50%; word-wrap: break-word; white-space: normal; text-align:left;">Action</th>';
   put '</tr>';

   /* Read and Populate Table Data */
   do until (eof);
      set backlog_data1 end=eof;

      /* Apply Red Color If File is Missing or Below Threshold */
      if file_status = "Missing" or file_status = "Below Threshold" then do;
         put '<tr style="font-size: 11px; background-color: #f9f9f9;">';
         put '<td style="padding: 6px;">' file_date '</td>';
         put '<td style="padding: 6px; color: red;"><strong>' file_status '</strong></td>'; /* Red for missing/below threshold */
         put '<td style="padding: 6px;">' formatted_size '</td>';
         put '<td style="padding: 6px; color: red; font-weight: bold; word-wrap: break-word; white-space: normal; text-align:left;">' trim(left(action)) '</td>'; /* Red Action Text */
         put '</tr>';
      end;
      else do;
         put '<tr style="font-size: 11px; background-color: #f9f9f9;">';
         put '<td style="padding: 6px;">' file_date '</td>';
         put '<td style="padding: 6px;">' file_status '</td>';
         put '<td style="padding: 6px;">' formatted_size '</td>';
         put '<td style="padding: 6px; word-wrap: break-word; white-space: normal; text-align:left;">' trim(left(action)) '</td>';
         put '</tr>';
      end;
   end;

   /* Close Table & HTML */
   put '</table>';

   /* Total Records Section */
   put '<p style="margin-top: 10px; font-size: 14px;"><strong>Total Records:</strong> <span style="font-size: 13px; color: #555;">' total_records '</span></p>';

   put '</body></html>';
run;







data _null_;
   file mail;

   /* Start HTML */
   put '<html><body style="font-family: Arial, sans-serif; margin: 10px; font-size: 12px; color: #333;">';

   /* Email Header */
   put '<h2 style="color: #2cae50; border-bottom: 2px solid #3498db; font-size: 16px;">Non-Pega SMS File Report</h2>';

   /* Report Summary */
   put '<p style="margin: 5px 0;"><strong>Base Path:</strong> ' "&base_path" '</p>';
   put '<p style="margin: 5px 0;"><strong>Report Period:</strong> Last ' "&days_back" ' Days</p>';
   put '<p style="margin: 5px 0;"><strong>Generated:</strong> ' %sysfunc(datetime(), datetime20.) '</p>';

   /* Table Header - PRINT ONLY ONCE */
   put '<h3 style="color: #3498db; font-size: 14px;">Detailed Report</h3>';
   put '<table border="1" cellpadding="2" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 10px; font-size: 11px;">';

   /* Ensure table header is printed only once */
   put '<tr style="background-color: #3498db; color: white; font-size: 12px; text-align: left;">';
   put '<th style="padding: 6px; width: 15%;">File Date</th>';
   put '<th style="padding: 6px; width: 20%;">File Status</th>';
   put '<th style="padding: 6px; width: 15%;">File Size</th>';
   put '<th style="padding: 6px; width: 50%; word-wrap: break-word; white-space: normal; text-align:left;">Action</th>';
   put '</tr>';

   /* Read and Populate Table Data */
   do until (eof);
      set backlog_data1 end=eof;
      put '<tr style="font-size: 11px; background-color: #f9f9f9;">';
      put '<td style="padding: 6px;">' file_date '</td>';
      put '<td style="padding: 6px;">' file_status '</td>';
      put '<td style="padding: 6px;">' formatted_size '</td>';
      put '<td style="padding: 6px; word-wrap: break-word; white-space: normal; text-align:left;">' trim(left(action)) '</td>';
      put '</tr>';
   end;

   /* Close Table & HTML */
   put '</table>';
   put '</body></html>';
run;










Here is the final refined email:

Subject: RE: EXTERNAL ‚Äì OSF Failure

Hi Kaja,

The LOR file shared for February 25 had the location as ‚ÄúWAAL TPSA‚Äù instead of ‚ÄúMUM TPSA‚Äù, ‚ÄúMUM, TPSA‚Äù, or ‚ÄúTPSA, MUM‚Äù. This discrepancy is the reason for the different OSF names.

Regarding the failure, we received a response from the InMoment Team confirming that the failure information was shared on February 14th, late at night, at 11:07 PM. As I was on sick leave on Monday, I connected with you on Tuesday to discuss the issue. On the same day, I retriggered the file and also forwarded the failure email to you.

Please let me know if you need any further clarification.

Best regards,
Prachi Jain
Business Analyst
[Email: prachi.jain@xxxxxx.com]

This version keeps it professional, concise, and clear. Let me know if you need any further adjustments.









Branch Growth Rank = 
VAR BranchCASAGrowth = SUM('Sales MI'[CASA_GROW])
RETURN 
IF(
    NOT(ISBLANK(BranchCASAGrowth)), 
    RANKX(
        ALLSELECTED('Branch Mapping'[BRANCH NAME]), 
        BranchCASAGrowth, 
        , 
        DESC, 
        DENSE
    )
)










/* Send HTML email report */
filename mail email &recipient_email
    subject="Server File Audit Report - Last &days_back Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body style="font-family: Arial, sans-serif; margin: 20px;">';
    
    put '<h2 style="color: #2c3e50; border-bottom: 2px solid #3498db;">';
    put "Server File Audit Report";
    put '</h2>';
    
    put '<div style="margin-bottom: 30px;">';
    put "<p><strong>Base Path:</strong> &base_path</p>";
    put "<p><strong>Report Period:</strong> Last &days_back Days</p>";
    put "<p><strong>Generated:</strong> %sysfunc(datetime(), datetime20.)</p>";
    put '</div>';
    
    put '<h3 style="color: #34495e;">Detailed Report</h3>';
    put '<table border="1" style="border-collapse: collapse; width: 100%; margin-bottom: 30px;">';

    /* Print the header row once */
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>File Status</th><th>File Size</th></tr>';

    /* Loop through backlog dataset */
    do until (eof);
        set backlog end=eof;
        put '<tr>';
        put '<td style="padding: 8px;">' file_date '</td>';
        put '<td style="padding: 8px;">' file_status '</td>';
        put '<td style="padding: 8px;">' formatted_size '</td>';
        put '</tr>';
    end;
    
    put '</table>';
    put '</body></html>';
run;














/* Send HTML email report */
filename mail email &recipient_email
    subject="Server File Audit Report - Last &days_back Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body style="font-family: Arial, sans-serif; margin: 20px;">';
    
    put '<h2 style="color: #2c3e50; border-bottom: 2px solid #3498db;">';
    put "Server File Audit Report";
    put '</h2>';
    
    put '<div style="margin-bottom: 30px;">';
    put "<p><strong>Base Path:</strong> &base_path</p>";
    put "<p><strong>Report Period:</strong> Last &days_back Days</p>";
    put "<p><strong>Generated:</strong> %sysfunc(datetime(), datetime20.)</p>";
    put '</div>';
    
    put '<h3 style="color: #34495e;">Detailed Report</h3>';
    put '<table border="1" style="border-collapse: collapse; width: 100%; margin-bottom: 30px;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>File Status</th><th>File Size</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put '<tr>';
        put '<td style="padding: 8px;">' file_date '</td>';
        put '<td style="padding: 8px;">' file_status '</td>';
        put '<td style="padding: 8px;">' formatted_size '</td>';
        put '</tr>';
    end;
    
    put '</table>';
    put '</body></html>';
run;

/* DELETE EXTRACTED FILES AFTER PROCESSING */
x "rm -rf &unzip_path";








tst
data _null_;
    test_file = "/sasdata/inm/mnt/test.txt";
    rc = filename('test', test_file);
    fid = fopen('test', 'W');
    if fid > 0 then do;
        put 'Write test: Success';
        rc = fclose(fid);
    end;
    else put 'Error: ' sysmsg();
    rc = filename('test');
run;









%let base_path = /data/skdn/kffkfkfkd/;  /* Server path containing ZIP files */
%let days_back = 45;                     /* Number of days to check */
%let size_threshold = 102400;            /* 100 KB threshold */
%let recipient_email = your.email@domain.com;

/* Clear previous data */
proc delete data=backlog; run;
proc delete data=summary; run;

/* Initialize dataset */
data backlog;
    length file_date $10 file_status $25 file_size 8;
    stop;
run;

%macro check_zips;

%do i = 0 %to %eval(&days_back - 1);
    /* Generate date string */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddd10.);
    %let zip_path = &base_path.&check_date..zip;

    %put #########################################;
    %put Checking ZIP: &zip_path;

    /* File existence check */
    data _null_;
        file_exists = fileexist("&zip_path");
        if file_exists then do;
            file_id = fopen("&zip_path", 'I', 'B');  /* Binary mode */
            if file_id > 0 then do;
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                put "ERROR: Could not open file";
                call symputx('file_exists', 0);
            end;
        end;
        else do;
            call symputx('file_exists', 0);
        end;
    run;

    %if &file_exists %then %do;
        /* ZIP validation */
        %let valid_zip = 0;
        filename inzip ZIP "&zip_path";

        data _null_;
            fid = fopen('inzip');
            if fid > 0 then do;
                call symputx('valid_zip', 1);
                rc = fclose(fid);
            end;
            rc = filename('inzip');
        run;

        /* Determine status */
        %let status=;
        %if &valid_zip %then %let status=Valid;
        %else %let status=Corrupt;
        
        %if &file_size < &size_threshold %then %let status=&status (Below Threshold);

        data temp;
            file_date = "&check_date";
            file_status = "&status";
            file_size = &file_size;
        run;
        proc append base=backlog data=temp; run;
    %end;
    %else %do;
        data temp;
            file_date = "&check_date";
            file_status = "Missing";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;
%mend;

%check_zips;

/* Create summary statistics */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status = 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send HTML email report */
filename mail email &recipient_email
    subject="Daily ZIP File Report - Last &days_back Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body style="font-family: Arial, sans-serif;">';
    put '<h2 style="color: #2c3e50;">ZIP File Status Report</h2>';
    put "<p><strong>Location:</strong> &base_path</p>";
    put "<p><strong>Date Range:</strong> %sysfunc(intnx(day, %sysfunc(today()), -&days_back +1, b), yymmddd10.) to %sysfunc(today(), yymmddd10.)</p>";
    
    put '<h3 style="color: #34495e;">Daily Status</h3>';
    put '<table border="1" cellpadding="5" style="border-collapse: collapse;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>Status</th><th>File Size</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put '<tr>';
        put '<td>' file_date '</td>';
        put '<td>' file_status '</td>';
        put '<td>' file_size '</td>';
        put '</tr>';
    end;
    put '</table>';
    
    put '<h3 style="color: #34495e; margin-top: 20px;">Summary</h3>';
    put '<table border="1" cellpadding="5" style="border-collapse: collapse;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>Valid</th><th>Missing</th><th>Corrupt</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put '<tr>';
        put '<td>' file_date '</td>';
        put '<td>' Valid_Files '</td>';
        put '<td>' Missing_Files '</td>';
        put '<td>' Corrupt_Files '</td>';
        put '<td>' Size_Warnings '</td>';
        put '</tr>';
    end;
    put '</table>';
    put '</body></html>';
run;












tt
%let base_path = /data/skdn/kffkfkfkd/;  /* Server path - end with / */
%let days_back = 45;                     /* Days to check (0 to T-44) */
%let size_threshold = 102400;            /* 100 KB threshold */
%let recipient_email = your.email@domain.com;

/* Delete previous datasets */
proc delete data=backlog; run;
proc delete data=summary; run;

/* Initialize dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $25 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1);
    /* Generate date-based folder name */
    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b));
    %let check_date = %sysfunc(putn(&raw_date, yymmddd10.)); /* YYYY-MM-DD */
    %let folder_path = %sysfunc(catx(/,"&base_path","&check_date"));
    %let file_name = &check_date..zip;

    /* Debugging output */
    %put #########################################;
    %put RAW DATE: &raw_date;
    %put FOLDER PATH: &folder_path;
    %put FILE NAME: &file_name;
    
    /* 1. Folder existence check with path verification */
    data _null_;
        /* Resolve environment variables if any */
        resolved_path = resolve("&folder_path");
        
        /* Verify path exists */
        folder_exists = fileexist(resolved_path);
        put "Resolved path: " resolved_path;
        put "Folder exists: " folder_exists;
        
        /* Check directory contents */
        if folder_exists then do:
            rc = filename('dir', resolved_path);
            dir_id = dopen('dir');
            if dir_id > 0 then do:
                put "First 3 files:";
                do i = 1 to min(dnum(dir_id),3);
                    put "  " dread(dir_id,i);
                end;
                rc = dclose(dir_id);
            end;
            rc = filename('dir');
        end;
        
        call symputx('folder_found', folder_exists);
    run;

    %if &folder_found %then %do;
        /* 2. File check with explicit server path */
        data _null_;
            full_path = resolve(catx(/, "&folder_path", "&file_name"));
            put "Full file path: " full_path;
            
            file_exists = fileexist(full_path);
            if file_exists then do:
                /* Check file accessibility */
                file_id = fopen(full_path, 'I', 'B');
                if file_id > 0 then do:
                    file_size = fsize(file_id);
                    rc = fclose(file_id);
                    call symputx('file_size', file_size);
                    call symputx('file_exists', 1);
                    put "File accessible. Size:" file_size "bytes";
                end;
                else do:
                    put "ERROR: File exists but cannot be opened";
                    call symputx('file_exists', 0);
                end;
            end;
            else do:
                put "File not found";
                call symputx('file_exists', 0);
            end;
        run;

        /* Rest of the logic... */
        
%mend;

%check_files;

/* Rest of reporting code... */






%if &folder_found %then %do;
    /* Extract ZIP File */
    filename sftpzip sftp "/your/sftp/directory/&check_date..zip"
        host="sftp.yourdomain.com"
        user="your_username"
        pass="your_password";

    filename localzip "/sas/temp/&check_date..zip";

    /* Copy ZIP to local SAS folder */
    data _null_;
        infile sftpzip;
        file localzip;
        input;
        put _infile_;
    run;

    /* Unzip the file */
    x "unzip -o /sas/temp/&check_date..zip -d /sas/temp/&check_date./";

    /* Set new folder path */
    %let folder_path = /sas/temp/&check_date./;
%end;









mnt
%let base_path = \\server\share\archive\;  /* UNC path - update this */
%let days_back = 45;                      /* 0 to 44 days */
%let size_threshold = 102400;             /* 100KB threshold */
%let recipient_email = your.email@domain.com; /* Update email */

/* Delete previous data */
proc delete data=backlog; run;
proc delete data=summary; run;

/* Initialize dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $25 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1);
    /* Generate date components */
    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b));
    %let check_date = %sysfunc(putn(&raw_date, yymmddd10.));
    
    /* Construct server paths */
    %let folder_path = %sysfunc(translate(&base_path.%sysfunc(putn(&raw_date, yymmddd10.)), '/', '\'));
    %let file_name = %sysfunc(putn(&raw_date, yymmddd10.))..zip;

    /* Debugging output */
    %put #########################################;
    %put Checking: &folder_path;
    %put Looking for: &file_name;
    
    /* 1. Folder existence check */
    data _null_;
        length resolved_path $512;
        resolved_path = resolve("&folder_path");
        folder_exists = fileexist(resolved_path);
        call symputx('folder_found', folder_exists);
    run;

    %if &folder_found %then %do;
        /* 2. File existence & size check */
        data _null_;
            length full_path $512;
            full_path = resolve(catx('\', "&folder_path", "&file_name"));
            
            file_exists = fileexist(full_path);
            
            if file_exists then do;
                file_id = fopen(full_path, 'I', 'B', 'recfm=n');
                if file_id > 0 then do;
                    file_size = fsize(file_id);
                    rc = fclose(file_id);
                    call symputx('file_size', file_size);
                    call symputx('file_exists', 1);
                end;
                else do;
                    call symputx('file_exists', 0);
                    call symputx('file_size', 0);
                end;
            end;
            else do;
                call symputx('file_exists', 0);
                call symputx('file_size', 0);
            end;
        run;

        %if not &file_exists %then %do;
            /* Case 1: File missing */
            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* 3. ZIP validation */
            %let valid_zip = 0;
            filename inzip ZIP "&folder_path/&file_name";

            data _null_;
                rc = filename('inzip', "&folder_path/&file_name");
                fid = fopen('inzip');
                if fid > 0 then do;
                    call symputx('valid_zip', 1);
                    rc = fclose(fid);
                end;
                rc = filename('inzip');
            run;

            /* Determine final status */
            %let status=;
            %if &valid_zip %then %let status=Valid;
            %else %let status=Corrupt;
            
            %if &file_size < &size_threshold %then %let status=&status (Below Threshold);

            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Case 2: Folder missing */
        data temp;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;
%mend;

%check_files;

/* Create summary statistics */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when folder_status = 'Exists' then 1 else 0 end) as Folders_Exist,
        sum(case when folder_status = 'Missing' then 1 else 0 end) as Folders_Missing,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status = 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send HTML email report */
filename mail email &recipient_email
    subject="Server File Audit Report - Last &days_back Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body style="font-family: Arial, sans-serif; margin: 20px;">';
    
    put '<h2 style="color: #2c3e50; border-bottom: 2px solid #3498db;">';
    put "Server File Audit Report";
    put '</h2>';
    
    put '<div style="margin-bottom: 30px;">';
    put "<p><strong>Base Path:</strong> &base_path</p>";
    put "<p><strong>Report Period:</strong> Last &days_back Days</p>";
    put "<p><strong>Generated:</strong> %sysfunc(datetime(), datetime20.)</p>";
    put '</div>';
    
    put '<h3 style="color: #34495e;">Daily Status Details</h3>';
    put '<table border="1" style="border-collapse: collapse; width: 100%; margin-bottom: 30px;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>Folder Status</th><th>File Status</th><th>File Size</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put '<tr>';
        put '<td style="padding: 8px;">' file_date '</td>';
        put '<td style="padding: 8px;">' folder_status '</td>';
        put '<td style="padding: 8px;">' file_status '</td>';
        put '<td style="padding: 8px;">' file_size '</td>';
        put '</tr>';
    end;
    
    put '</table>';
    
    put '<h3 style="color: #34495e;">Summary Statistics</h3>';
    put '<table border="1" style="border-collapse: collapse; width: 100%;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>Folders Exist</th><th>Folders Missing</th><th>Valid Files</th>';
    put '<th>Missing Files</th><th>Corrupt Files</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put '<tr>';
        put '<td style="padding: 8px;">' file_date '</td>';
        put '<td style="padding: 8px; text-align: center;">' Folders_Exist '</td>';
        put '<td style="padding: 8px; text-align: center;">' Folders_Missing '</td>';
        put '<td style="padding: 8px; text-align: center;">' Valid_Files '</td>';
        put '<td style="padding: 8px; text-align: center;">' Missing_Files '</td>';
        put '<td style="padding: 8px; text-align: center;">' Corrupt_Files '</td>';
        put '<td style="padding: 8px; text-align: center;">' Size_Warnings '</td>';
        put '</tr>';
    end;
    
    put '</table>';
    put '</body></html>';
run;















66


%let base_path = /your/sas/directory/; /* Update this with your base directory */
%let days_back = 45; /* Number of days to check (0 to -44 for 45 days total) */
%let size_threshold = 102400; /* 100 KB in bytes */

proc delete data=backlog; run;

/* Initialize backlog dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $50 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1); /* Loop from T-0 to T-44 */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddd10.);
    %let folder_path = &base_path.&check_date./;
    %let file_name = &check_date..csv;

    /* Step 1: Check if the unzipped folder exists using dopen() */
    data _null_;
        folder_id = dopen("&folder_path");
        if folder_id > 0 then folder_exists = 1;
        else folder_exists = 0;
        call symputx('folder_found', folder_exists);
    run;

    %put Folder Path: &folder_path;
    %put Folder Found: &folder_found;

    %if &folder_found %then %do;
        /* Step 2: Check if the file exists */
        data _null_;
            length fullpath $256;
            fullpath = "&folder_path.&file_name";
            file_exists = fileexist(fullpath);
            
            if file_exists then do;
                file_id = fopen(fullpath, 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                call symputx('file_size', 0);
                call symputx('file_exists', 0);
            end;
        run;

        %put File Path: &folder_path.&file_name;
        %put File Found: &file_exists;
        %put File Size: &file_size;

        %if not &file_exists %then %do;
            data temp;
                length file_date $10 folder_status $20 file_status $20;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* Step 3: Check if file is readable and meets size threshold */
            data _null_;
                infile "&folder_path.&file_name" eof=eof;
                rc = 0;
                input;
                return;
                
                eof:
                rc = 1;
                call symputx('file_valid', rc);
                stop;
            run;

            %if &file_valid %then %do;
                %let status=Valid;
            %end;
            %else %do;
                %let status=Corrupt;
            %end;

            %if &file_size < &size_threshold %then %do;
                %let status=&status (Below Threshold);
            %end;

            data temp;
                length file_date $10 folder_status $20 file_status $50;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Step 4: Folder is missing */
        data temp;
            length file_date $10 folder_status $20 file_status $20;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;

%mend check_files;

%check_files;

/* Create a proper summary dataset */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when folder_status = 'Exists' then 1 else 0 end) as Folders_Exist,
        sum(case when folder_status = 'Missing' then 1 else 0 end) as Folders_Missing,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status contains 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send an email with backlog details */
filename mail email 'your_email@domain.com'
    subject="Folder & File Check Report - Last 45 Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body>';
    put '<h2>Folder & File Check Report - Last 45 Days (T-0 to T-44)</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folder Status</th><th>File Status</th><th>File Size (bytes)</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put "<tr><td>" file_date "</td><td>" folder_status "</td><td>" file_status "</td><td>" file_size "</td></tr>";
    end;
    
    put '</table>';
    
    put '<h2>Summary</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folders Exist</th><th>Folders Missing</th><th>Valid Files</th><th>Missing Files</th><th>Corrupt Files</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put "<tr><td>" file_date "</td><td>" Folders_Exist "</td><td>" Folders_Missing "</td><td>" Valid_Files "</td><td>" Missing_Files "</td><td>" Corrupt_Files "</td><td>" Size_Warnings "</td></tr>";
    end;
    
    put '</table></body></html>';
run;









data _null_;
    rc1 = filename('test', "\\server\share\archive\known_file.zip");
    rc2 = fopen('test');
    if rc2 > 0 then do;
        put "SUCCESS: File accessible";
        rc3 = fclose(rc2);
    end;
    else put "ERROR: " sysmsg();
    rc4 = filename('test');
run;










4
%let base_path = /your/base/path/;  /* Must end with slash */
%let days_back = 45;
%let size_threshold = 102400;

/* Initialize dataset */
proc delete data=backlog; run;

data backlog;
    length file_date $10 folder_status $20 file_status $20 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1);
    /* Use hyphens in date format */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddd10.);
    %let folder_path = &base_path.%sysfunc(translate(&check_date,_,:-));  /* Replace : with _ */
    %let file_name = &check_date..zip;

    /* Debugging output */
    %put #########################################;
    %put Checking path: &folder_path;
    %put Looking for file: &file_name;
    
    /* Folder existence check */
    data _null_;
        folder_exists = fileexist("&folder_path");
        call symputx('folder_found', folder_exists);
        put "Folder exists: " folder_exists;
    run;

    %if &folder_found %then %do;
        /* File check */
        data _null_;
            full_path = "&folder_path/&file_name";  /* Added slash between folder and file */
            file_exists = fileexist(full_path);
            
            if file_exists then do;
                file_id = fopen(full_path, 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                call symputx('file_size', 0);
                call symputx('file_exists', 0);
            end;
            put "File exists: " file_exists;
        run;

        /* Rest of your existing logic */
        %if not &file_exists %then %do;
            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* ZIP validation logic */
            %let valid_zip = 0;
            filename inzip ZIP "&folder_path/&file_name";

            data _null_;
                rc = filename('inzip', "&folder_path/&file_name");
                fid = fopen('inzip');
                if fid > 0 then do;
                    call symputx('valid_zip', 1);
                    rc = fclose(fid);
                end;
                rc = filename('inzip');
            run;

            %if &valid_zip %then %let status=Valid;
            %else %let status=Corrupt;

            %if &file_size < &size_threshold %then %let status=&status (Below Threshold);

            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        data temp;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;
%mend;

%check_files;








%let base_path = /mnt/data/archive/;  /* MUST end with slash */
%let check_date = %sysfunc(today(), yymmddn8.); /* Current date as YYYYMMDD */

/* Diagnostic Path Check */
%put #############################################;
%put Diagnostic Check for Date: &check_date;
%put #############################################;

%let full_path = &base_path.&check_date;

data _null_;
    /* Basic existence check */
    folder_exists = fileexist("&full_path");
    put "Basic Existence Check: " folder_exists=;
    
    /* Detailed access verification */
    rc1 = filename('diag', "&full_path");
    diag_fid = dopen('diag');
    
    if diag_fid > 0 then do;
        put "Directory Access Granted";
        put "Contents:";
        
        /* List first 5 files */
        do i = 1 to min(5, dnum(diag_fid));
            fname = dread(diag_fid, i);
            put "  " fname=;
        end;
        
        rc2 = dclose(diag_fid);
    end;
    else do;
        put "Access Error: " sysmsg=;
    end;
    
    rc3 = filename('diag');
run;











%let base_path = /your/sas/directory/; /* Update this with your base directory */
%let days_back = 45; /* Number of days to check (0 to -44 for 45 days total) */
%let size_threshold = 102400; /* 100 KB in bytes */

proc delete data=backlog; run;

/* Initialize backlog dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $20 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1); /* Loop from T-0 to T-44 */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddn8.);
    %let folder_path = &base_path.&check_date./;
    %let file_name = &check_date..csv;
    
    /* Step 1: Check if the unzipped folder exists */
    data _null_;
        folder_exists = fileexist("&folder_path");
        call symputx('folder_found', folder_exists);
    run;

    %if &folder_found %then %do;
        /* Step 2: Check if the file exists */
        data _null_;
            length fullpath $256;
            fullpath = "&folder_path.&file_name";
            file_exists = fileexist(fullpath);
            
            if file_exists then do;
                file_id = fopen(fullpath, 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                call symputx('file_size', 0);
                call symputx('file_exists', 0);
            end;
        run;

        %if not &file_exists %then %do;
            data temp;
                length file_date $10 folder_status $20 file_status $20;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* Step 3: Check if file is readable and meets size threshold */
            data _null_;
                infile "&folder_path.&file_name" eof=eof;
                rc = 0;
                input;
                put _infile_;
                return;
                
                eof:
                rc = 1;
                call symputx('file_valid', rc);
                stop;
            run;

            %if &file_valid %then %do;
                %let status=Valid;
            %end;
            %else %do;
                %let status=Corrupt;
            %end;

            %if &file_size < &size_threshold %then %do;
                %let status=&status (Below Threshold);
            %end;

            data temp;
                length file_date $10 folder_status $20 file_status $50;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Step 4: Folder is missing */
        data temp;
            length file_date $10 folder_status $20 file_status $20;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;

%mend check_files;

%check_files;

/* Create a proper summary dataset */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when folder_status = 'Exists' then 1 else 0 end) as Folders_Exist,
        sum(case when folder_status = 'Missing' then 1 else 0 end) as Folders_Missing,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status contains 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send an email with backlog details */
filename mail email 'your_email@domain.com'
    subject="Folder & File Check Report - Last 45 Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body>';
    put '<h2>Folder & File Check Report - Last 45 Days (T-0 to T-44)</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folder Status</th><th>File Status</th><th>File Size (bytes)</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put "<tr><td>" file_date "</td><td>" folder_status "</td><td>" file_status "</td><td>" file_size "</td></tr>";
    end;
    
    put '</table>';
    
    put '<h2>Summary</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folders Exist</th><th>Folders Missing</th><th>Valid Files</th><th>Missing Files</th><th>Corrupt Files</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put "<tr><td>" file_date "</td><td>" Folders_Exist "</td><td>" Folders_Missing "</td><td>" Valid_Files "</td><td>" Missing_Files "</td><td>" Corrupt_Files "</td><td>" Size_Warnings "</td></tr>";
    end;
    
    put '</table></body></html>';
run;
