%let base_path = /your/sas/directory/; /* Update this with your base directory */
%let days_back = 45; /* Number of days for backlog */
%let size_threshold = 102400; /* 100 KB in bytes */

data backlog;
    length file_date $10 folder_status $20 file_status $20 file_size 8;
run;

%macro check_files;

/* Loop through past 'N' days */
%do i = 1 %to &days_back;
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmdd10.);
    %let folder_path = &base_path.&check_date./;
    %let file_name = &check_date..csv;
    
    /* Step 1: Check if folder exists */
    data _null_;
        folder_exists = fileexist("&folder_path");
        call symputx('folder_found', ifc(folder_exists, 'YES', 'NO'));
    run;

    %if &folder_found = YES %then %do;
        /* Step 2: Check if file exists */
        data _null_;
            file_exists = fileexist("&folder_path.&file_name");
            if file_exists then do;
                file_id = fopen("&folder_path.&file_name", 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
            end;
            else call symputx('file_size', 0);
            call symputx('file_exists', file_exists);
        run;

        %if &file_exists = 0 %then %do;
            data backlog;
                set backlog;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
        %end;
        %else %do;
            /* Step 3: Try opening the file */
            %let dsid = %sysfunc(open("&folder_path.&file_name"));
            %if &dsid %then %do;
                %let rc = %sysfunc(close(&dsid));
                data backlog;
                    set backlog;
                    file_date = "&check_date";
                    folder_status = "Exists";
                    file_status = "Valid";
                    file_size = &file_size;
                run;
            %end;
            %else %do;
                data backlog;
                    set backlog;
                    file_date = "&check_date";
                    folder_status = "Exists";
                    file_status = "Corrupt";
                    file_size = &file_size;
                run;
            %end;
        %end;
    %end;
    %else %do;
        /* Step 4: Folder is missing */
        data backlog;
            set backlog;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
    %end;
%end;

%mend check_files;

%check_files;

/* Create a summary dataset */
proc sql;
    create table summary as
    select 
        file_date,
        count(case when folder_status = 'Exists' then 1 else 0 end) as Folders_Exist,
        count(case when folder_status = 'Missing' then 1 else 0 end) as Folders_Missing,
        count(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        count(case when file_status = 'Missing' then 1 else 0 end) as Missing_Files,
        count(case when file_status = 'Corrupt' then 1 else 0 end) as Corrupt_Files
    from backlog
    group by file_date;
quit;

/* Send an email with backlog details */
filename mail email 'your_email@domain.com'
    subject="Folder & File Check Report - Last 45 Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body>';
    put '<h2>Folder & File Check Report - Last 45 Days</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folder Status</th><th>File Status</th><th>File Size (bytes)</th></tr>';
    set backlog;
    put "<tr><td>" file_date "</td><td>" folder_status "</td><td>" file_status "</td><td>" file_size "</td></tr>";
    put '</table>';
    
    put '<h2>Summary</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folders Exist</th><th>Folders Missing</th><th>Valid Files</th><th>Missing Files</th><th>Corrupt Files</th></tr>';
    set summary;
    put "<tr><td>" file_date "</td><td>" Folders_Exist "</td><td>" Folders_Missing "</td><td>" Valid_Files "</td><td>" Missing_Files "</td><td>" Corrupt_Files "</td></tr>";
    put '</table></body></html>';
run;




%let base_path = /your/sas/directory/; /* Update with actual directory path */
%let days_back = 5; /* Number of days for backlog tracking */
%let size_threshold = 102400; /* 100 KB in bytes */

%macro check_files;

/* Create a dataset to store backlog */
data backlog;
    length file_date $10 status $50 file_size 8;
run;

/* Loop through past 'N' days */
%do i = 1 %to &days_back;
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmdd10.);
    %let folder_path = &base_path.&check_date./;
    %let file_name = &check_date..csv;

    data _null_;
        folder_exists = fileexist("&folder_path");
        if folder_exists then call symputx('folder_found', 'YES');
        else call symputx('folder_found', 'NO');
    run;

    %if &folder_found = YES %then %do;
        data _null_;
            file_exists = fileexist("&folder_path.&file_name");
            if file_exists then do;
                file_id = fopen("&folder_path.&file_name", 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
            end;
            else call symputx('file_size', 0);
            call symputx('file_exists', file_exists);
        run;

        %if &file_exists = 0 %then %do;
            data backlog;
                set backlog;
                file_date = "&check_date";
                status = "File Missing";
                file_size = .;
            run;
        %end;
        %else %if &file_size < &size_threshold %then %do;
            data backlog;
                set backlog;
                file_date = "&check_date";
                status = "File Size Too Small (&file_size bytes)";
                file_size = &file_size;
            run;
        %end;
        %else %do;
            /* Try opening the CSV in SAS */
            %let dsid = %sysfunc(open("&folder_path.&file_name"));
            %if &dsid %then %do;
                %let rc = %sysfunc(close(&dsid));
                data backlog;
                    set backlog;
                    file_date = "&check_date";
                    status = "File OK (&file_size bytes)";
                    file_size = &file_size;
                run;
            %end;
            %else %do;
                data backlog;
                    set backlog;
                    file_date = "&check_date";
                    status = "File Corrupt - Cannot Open";
                    file_size = &file_size;
                run;
            %end;
        %end;
    %end;
    %else %do;
        data backlog;
            set backlog;
            file_date = "&check_date";
            status = "Folder Missing";
            file_size = .;
        run;
    %end;
%end;

/* Send an email with backlog details */
filename mail email 'your_email@domain.com'
    subject="Daily File Check Report"
    type="text/html";

data _null_;
    file mail;
    put '<html><body>';
    put '<h2>File Check Report</h2>';
    put '<table border="1"><tr><th>Date</th><th>Status</th><th>File Size (bytes)</th></tr>';
    set backlog;
    put "<tr><td>" file_date "</td><td>" status "</td><td>" file_size "</td></tr>";
    put '</table></body></html>';
run;

%mend check_files;

%check_files;













%let zip_path = /your/sas/directory/;
%let zip_name = daily_file.zip; /* Change to your ZIP file name */
%let extracted_file_name = expected_file.csv; /* Change to your expected file */
%let size_threshold = 102400; /* 100 KB in bytes */

data _null_;
    /* Check if ZIP file exists */
    zip_exists = fileexist("&zip_path.&zip_name");
    if zip_exists then do;
        file_id = fopen("&zip_path.&zip_name", 'I');
        zip_size = fsize(file_id);
        rc = fclose(file_id);
        call symputx('zip_size', zip_size);
    end;
    else call symputx('zip_size', 0);
    call symputx('zip_exists', zip_exists);
run;

%macro check_zip_file;
    %if &zip_exists = 0 %then %do;
        /* ZIP file is missing - send email */
        filename mail email 'your_email@domain.com'
            subject="ZIP File Missing Alert: &zip_name"
            type="text/plain";

        data _null_;
            file mail;
            put "Alert: The ZIP file &zip_name is missing from &zip_path.";
            put "Please check and upload the correct file.";
        run;
    %end;
    %else %if &zip_size < &size_threshold %then %do;
        /* ZIP file exists but size is too small - send email */
        filename mail email 'your_email@domain.com'
            subject="ZIP File Size Alert: &zip_name"
            type="text/plain";

        data _null_;
            file mail;
            put "Alert: The ZIP file &zip_name is present but is too small.";
            put "ZIP File Size: &zip_size bytes.";
            put "Please verify and upload the correct file.";
        run;
    %end;
    %else %do;
        /* Unzip the file */
        filename zipfile zip "&zip_path.&zip_name";

        data _null_;
            infile zipfile;
            input;
            call symputx('unzipped_file_exists', 'YES');
        run;

        /* Check extracted file */
        data _null_;
            file_exists = fileexist("&zip_path.&extracted_file_name");
            if file_exists then do;
                file_id = fopen("&zip_path.&extracted_file_name", 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
            end;
            else call symputx('file_size', 0);
            call symputx('file_exists', file_exists);
        run;

        %if &file_exists = 0 %then %do;
            /* Extracted file is missing - send email */
            filename mail email 'your_email@domain.com'
                subject="Extracted File Missing Alert: &extracted_file_name"
                type="text/plain";

            data _null_;
                file mail;
                put "Alert: The extracted file &extracted_file_name is missing.";
                put "Please check and upload the correct file.";
            run;
        %end;
        %else %if &file_size < &size_threshold %then %do;
            /* Extracted file exists but is too small - send email */
            filename mail email 'your_email@domain.com'
                subject="Extracted File Size Alert: &extracted_file_name"
                type="text/plain";

            data _null_;
                file mail;
                put "Alert: The extracted file &extracted_file_name is too small.";
                put "File Size: &file_size bytes.";
                put "Please verify and upload the correct file.";
            run;
        %end;
    %end;
%mend check_zip_file;

%check_zip_file;









Subject: Prioritization and Bandwidth Challenges

Hi Kinnari and Souvik,

As I am working on both Campaigns and the BI part, I wanted to highlight the ongoing bandwidth challenges that I have been raising for the past couple of months and seek clarity on prioritization.

Below are the key projects and deliverables I am currently handling this week:
	1.	HML Dashboard UAT: The dashboard has been published, and after testing, it needs to be pushed to production.
	2.	Branch Initiatives: This has been recently assigned to me, and I will be working on it.
	3.	Sales Revenue: While the coding logic for some products is completed, a few are still pending. Due to bandwidth constraints, I haven’t been able to connect with stakeholders and Sriram to finalize the logic. This needs to be completed before the 10th, as this month’s MI will incorporate the new logic.
	4.	Campaign Dashboard: Frequent version updates and additions are required. For the next update, I need to dedicate the whole next week, and I plan to deliver the updated version to stakeholders by the 10th. Additionally, for the costing part, Smriti will provide the logic next week.
	5.	Trainings: There are multiple scheduled training sessions next week.
	6.	Daily and Monthly BAU: Managing regular BAU tasks for this week.

Given the workload and upcoming deadlines, I would appreciate any support in prioritizing these tasks. Please let me know how we can manage this efficiently.

Looking forward to your inputs.

Best,
[Your Name]
