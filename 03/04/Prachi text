%if &folder_found %then %do;
    /* Extract ZIP File */
    filename sftpzip sftp "/your/sftp/directory/&check_date..zip"
        host="sftp.yourdomain.com"
        user="your_username"
        pass="your_password";

    filename localzip "/sas/temp/&check_date..zip";

    /* Copy ZIP to local SAS folder */
    data _null_;
        infile sftpzip;
        file localzip;
        input;
        put _infile_;
    run;

    /* Unzip the file */
    x "unzip -o /sas/temp/&check_date..zip -d /sas/temp/&check_date./";

    /* Set new folder path */
    %let folder_path = /sas/temp/&check_date./;
%end;









mnt
%let base_path = \\server\share\archive\;  /* UNC path - update this */
%let days_back = 45;                      /* 0 to 44 days */
%let size_threshold = 102400;             /* 100KB threshold */
%let recipient_email = your.email@domain.com; /* Update email */

/* Delete previous data */
proc delete data=backlog; run;
proc delete data=summary; run;

/* Initialize dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $25 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1);
    /* Generate date components */
    %let raw_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b));
    %let check_date = %sysfunc(putn(&raw_date, yymmddd10.));
    
    /* Construct server paths */
    %let folder_path = %sysfunc(translate(&base_path.%sysfunc(putn(&raw_date, yymmddd10.)), '/', '\'));
    %let file_name = %sysfunc(putn(&raw_date, yymmddd10.))..zip;

    /* Debugging output */
    %put #########################################;
    %put Checking: &folder_path;
    %put Looking for: &file_name;
    
    /* 1. Folder existence check */
    data _null_;
        length resolved_path $512;
        resolved_path = resolve("&folder_path");
        folder_exists = fileexist(resolved_path);
        call symputx('folder_found', folder_exists);
    run;

    %if &folder_found %then %do;
        /* 2. File existence & size check */
        data _null_;
            length full_path $512;
            full_path = resolve(catx('\', "&folder_path", "&file_name"));
            
            file_exists = fileexist(full_path);
            
            if file_exists then do;
                file_id = fopen(full_path, 'I', 'B', 'recfm=n');
                if file_id > 0 then do;
                    file_size = fsize(file_id);
                    rc = fclose(file_id);
                    call symputx('file_size', file_size);
                    call symputx('file_exists', 1);
                end;
                else do;
                    call symputx('file_exists', 0);
                    call symputx('file_size', 0);
                end;
            end;
            else do;
                call symputx('file_exists', 0);
                call symputx('file_size', 0);
            end;
        run;

        %if not &file_exists %then %do;
            /* Case 1: File missing */
            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* 3. ZIP validation */
            %let valid_zip = 0;
            filename inzip ZIP "&folder_path/&file_name";

            data _null_;
                rc = filename('inzip', "&folder_path/&file_name");
                fid = fopen('inzip');
                if fid > 0 then do;
                    call symputx('valid_zip', 1);
                    rc = fclose(fid);
                end;
                rc = filename('inzip');
            run;

            /* Determine final status */
            %let status=;
            %if &valid_zip %then %let status=Valid;
            %else %let status=Corrupt;
            
            %if &file_size < &size_threshold %then %let status=&status (Below Threshold);

            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Case 2: Folder missing */
        data temp;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;
%mend;

%check_files;

/* Create summary statistics */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when folder_status = 'Exists' then 1 else 0 end) as Folders_Exist,
        sum(case when folder_status = 'Missing' then 1 else 0 end) as Folders_Missing,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status = 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send HTML email report */
filename mail email &recipient_email
    subject="Server File Audit Report - Last &days_back Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body style="font-family: Arial, sans-serif; margin: 20px;">';
    
    put '<h2 style="color: #2c3e50; border-bottom: 2px solid #3498db;">';
    put "Server File Audit Report";
    put '</h2>';
    
    put '<div style="margin-bottom: 30px;">';
    put "<p><strong>Base Path:</strong> &base_path</p>";
    put "<p><strong>Report Period:</strong> Last &days_back Days</p>";
    put "<p><strong>Generated:</strong> %sysfunc(datetime(), datetime20.)</p>";
    put '</div>';
    
    put '<h3 style="color: #34495e;">Daily Status Details</h3>';
    put '<table border="1" style="border-collapse: collapse; width: 100%; margin-bottom: 30px;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>Folder Status</th><th>File Status</th><th>File Size</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put '<tr>';
        put '<td style="padding: 8px;">' file_date '</td>';
        put '<td style="padding: 8px;">' folder_status '</td>';
        put '<td style="padding: 8px;">' file_status '</td>';
        put '<td style="padding: 8px;">' file_size '</td>';
        put '</tr>';
    end;
    
    put '</table>';
    
    put '<h3 style="color: #34495e;">Summary Statistics</h3>';
    put '<table border="1" style="border-collapse: collapse; width: 100%;">';
    put '<tr style="background-color: #3498db; color: white;">';
    put '<th>Date</th><th>Folders Exist</th><th>Folders Missing</th><th>Valid Files</th>';
    put '<th>Missing Files</th><th>Corrupt Files</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put '<tr>';
        put '<td style="padding: 8px;">' file_date '</td>';
        put '<td style="padding: 8px; text-align: center;">' Folders_Exist '</td>';
        put '<td style="padding: 8px; text-align: center;">' Folders_Missing '</td>';
        put '<td style="padding: 8px; text-align: center;">' Valid_Files '</td>';
        put '<td style="padding: 8px; text-align: center;">' Missing_Files '</td>';
        put '<td style="padding: 8px; text-align: center;">' Corrupt_Files '</td>';
        put '<td style="padding: 8px; text-align: center;">' Size_Warnings '</td>';
        put '</tr>';
    end;
    
    put '</table>';
    put '</body></html>';
run;















66


%let base_path = /your/sas/directory/; /* Update this with your base directory */
%let days_back = 45; /* Number of days to check (0 to -44 for 45 days total) */
%let size_threshold = 102400; /* 100 KB in bytes */

proc delete data=backlog; run;

/* Initialize backlog dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $50 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1); /* Loop from T-0 to T-44 */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddd10.);
    %let folder_path = &base_path.&check_date./;
    %let file_name = &check_date..csv;

    /* Step 1: Check if the unzipped folder exists using dopen() */
    data _null_;
        folder_id = dopen("&folder_path");
        if folder_id > 0 then folder_exists = 1;
        else folder_exists = 0;
        call symputx('folder_found', folder_exists);
    run;

    %put Folder Path: &folder_path;
    %put Folder Found: &folder_found;

    %if &folder_found %then %do;
        /* Step 2: Check if the file exists */
        data _null_;
            length fullpath $256;
            fullpath = "&folder_path.&file_name";
            file_exists = fileexist(fullpath);
            
            if file_exists then do;
                file_id = fopen(fullpath, 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                call symputx('file_size', 0);
                call symputx('file_exists', 0);
            end;
        run;

        %put File Path: &folder_path.&file_name;
        %put File Found: &file_exists;
        %put File Size: &file_size;

        %if not &file_exists %then %do;
            data temp;
                length file_date $10 folder_status $20 file_status $20;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* Step 3: Check if file is readable and meets size threshold */
            data _null_;
                infile "&folder_path.&file_name" eof=eof;
                rc = 0;
                input;
                return;
                
                eof:
                rc = 1;
                call symputx('file_valid', rc);
                stop;
            run;

            %if &file_valid %then %do;
                %let status=Valid;
            %end;
            %else %do;
                %let status=Corrupt;
            %end;

            %if &file_size < &size_threshold %then %do;
                %let status=&status (Below Threshold);
            %end;

            data temp;
                length file_date $10 folder_status $20 file_status $50;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Step 4: Folder is missing */
        data temp;
            length file_date $10 folder_status $20 file_status $20;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;

%mend check_files;

%check_files;

/* Create a proper summary dataset */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when folder_status = 'Exists' then 1 else 0 end) as Folders_Exist,
        sum(case when folder_status = 'Missing' then 1 else 0 end) as Folders_Missing,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status contains 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send an email with backlog details */
filename mail email 'your_email@domain.com'
    subject="Folder & File Check Report - Last 45 Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body>';
    put '<h2>Folder & File Check Report - Last 45 Days (T-0 to T-44)</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folder Status</th><th>File Status</th><th>File Size (bytes)</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put "<tr><td>" file_date "</td><td>" folder_status "</td><td>" file_status "</td><td>" file_size "</td></tr>";
    end;
    
    put '</table>';
    
    put '<h2>Summary</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folders Exist</th><th>Folders Missing</th><th>Valid Files</th><th>Missing Files</th><th>Corrupt Files</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put "<tr><td>" file_date "</td><td>" Folders_Exist "</td><td>" Folders_Missing "</td><td>" Valid_Files "</td><td>" Missing_Files "</td><td>" Corrupt_Files "</td><td>" Size_Warnings "</td></tr>";
    end;
    
    put '</table></body></html>';
run;









data _null_;
    rc1 = filename('test', "\\server\share\archive\known_file.zip");
    rc2 = fopen('test');
    if rc2 > 0 then do;
        put "SUCCESS: File accessible";
        rc3 = fclose(rc2);
    end;
    else put "ERROR: " sysmsg();
    rc4 = filename('test');
run;










4
%let base_path = /your/base/path/;  /* Must end with slash */
%let days_back = 45;
%let size_threshold = 102400;

/* Initialize dataset */
proc delete data=backlog; run;

data backlog;
    length file_date $10 folder_status $20 file_status $20 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1);
    /* Use hyphens in date format */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddd10.);
    %let folder_path = &base_path.%sysfunc(translate(&check_date,_,:-));  /* Replace : with _ */
    %let file_name = &check_date..zip;

    /* Debugging output */
    %put #########################################;
    %put Checking path: &folder_path;
    %put Looking for file: &file_name;
    
    /* Folder existence check */
    data _null_;
        folder_exists = fileexist("&folder_path");
        call symputx('folder_found', folder_exists);
        put "Folder exists: " folder_exists;
    run;

    %if &folder_found %then %do;
        /* File check */
        data _null_;
            full_path = "&folder_path/&file_name";  /* Added slash between folder and file */
            file_exists = fileexist(full_path);
            
            if file_exists then do;
                file_id = fopen(full_path, 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                call symputx('file_size', 0);
                call symputx('file_exists', 0);
            end;
            put "File exists: " file_exists;
        run;

        /* Rest of your existing logic */
        %if not &file_exists %then %do;
            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* ZIP validation logic */
            %let valid_zip = 0;
            filename inzip ZIP "&folder_path/&file_name";

            data _null_;
                rc = filename('inzip', "&folder_path/&file_name");
                fid = fopen('inzip');
                if fid > 0 then do;
                    call symputx('valid_zip', 1);
                    rc = fclose(fid);
                end;
                rc = filename('inzip');
            run;

            %if &valid_zip %then %let status=Valid;
            %else %let status=Corrupt;

            %if &file_size < &size_threshold %then %let status=&status (Below Threshold);

            data temp;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        data temp;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;
%mend;

%check_files;








%let base_path = /mnt/data/archive/;  /* MUST end with slash */
%let check_date = %sysfunc(today(), yymmddn8.); /* Current date as YYYYMMDD */

/* Diagnostic Path Check */
%put #############################################;
%put Diagnostic Check for Date: &check_date;
%put #############################################;

%let full_path = &base_path.&check_date;

data _null_;
    /* Basic existence check */
    folder_exists = fileexist("&full_path");
    put "Basic Existence Check: " folder_exists=;
    
    /* Detailed access verification */
    rc1 = filename('diag', "&full_path");
    diag_fid = dopen('diag');
    
    if diag_fid > 0 then do;
        put "Directory Access Granted";
        put "Contents:";
        
        /* List first 5 files */
        do i = 1 to min(5, dnum(diag_fid));
            fname = dread(diag_fid, i);
            put "  " fname=;
        end;
        
        rc2 = dclose(diag_fid);
    end;
    else do;
        put "Access Error: " sysmsg=;
    end;
    
    rc3 = filename('diag');
run;











%let base_path = /your/sas/directory/; /* Update this with your base directory */
%let days_back = 45; /* Number of days to check (0 to -44 for 45 days total) */
%let size_threshold = 102400; /* 100 KB in bytes */

proc delete data=backlog; run;

/* Initialize backlog dataset */
data backlog;
    length file_date $10 folder_status $20 file_status $20 file_size 8;
    stop;
run;

%macro check_files;

%do i = 0 %to %eval(&days_back - 1); /* Loop from T-0 to T-44 */
    %let check_date = %sysfunc(intnx(day, %sysfunc(today()), -&i, b), yymmddn8.);
    %let folder_path = &base_path.&check_date./;
    %let file_name = &check_date..csv;
    
    /* Step 1: Check if the unzipped folder exists */
    data _null_;
        folder_exists = fileexist("&folder_path");
        call symputx('folder_found', folder_exists);
    run;

    %if &folder_found %then %do;
        /* Step 2: Check if the file exists */
        data _null_;
            length fullpath $256;
            fullpath = "&folder_path.&file_name";
            file_exists = fileexist(fullpath);
            
            if file_exists then do;
                file_id = fopen(fullpath, 'I');
                file_size = fsize(file_id);
                rc = fclose(file_id);
                call symputx('file_size', file_size);
                call symputx('file_exists', 1);
            end;
            else do;
                call symputx('file_size', 0);
                call symputx('file_exists', 0);
            end;
        run;

        %if not &file_exists %then %do;
            data temp;
                length file_date $10 folder_status $20 file_status $20;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "Missing";
                file_size = .;
            run;
            proc append base=backlog data=temp; run;
        %end;
        %else %do;
            /* Step 3: Check if file is readable and meets size threshold */
            data _null_;
                infile "&folder_path.&file_name" eof=eof;
                rc = 0;
                input;
                put _infile_;
                return;
                
                eof:
                rc = 1;
                call symputx('file_valid', rc);
                stop;
            run;

            %if &file_valid %then %do;
                %let status=Valid;
            %end;
            %else %do;
                %let status=Corrupt;
            %end;

            %if &file_size < &size_threshold %then %do;
                %let status=&status (Below Threshold);
            %end;

            data temp;
                length file_date $10 folder_status $20 file_status $50;
                file_date = "&check_date";
                folder_status = "Exists";
                file_status = "&status";
                file_size = &file_size;
            run;
            proc append base=backlog data=temp; run;
        %end;
    %end;
    %else %do;
        /* Step 4: Folder is missing */
        data temp;
            length file_date $10 folder_status $20 file_status $20;
            file_date = "&check_date";
            folder_status = "Missing";
            file_status = "-";
            file_size = .;
        run;
        proc append base=backlog data=temp; run;
    %end;
%end;

%mend check_files;

%check_files;

/* Create a proper summary dataset */
proc sql;
    create table summary as
    select 
        file_date,
        sum(case when folder_status = 'Exists' then 1 else 0 end) as Folders_Exist,
        sum(case when folder_status = 'Missing' then 1 else 0 end) as Folders_Missing,
        sum(case when file_status = 'Valid' then 1 else 0 end) as Valid_Files,
        sum(case when file_status contains 'Missing' then 1 else 0 end) as Missing_Files,
        sum(case when file_status contains 'Corrupt' then 1 else 0 end) as Corrupt_Files,
        sum(case when file_status contains 'Threshold' then 1 else 0 end) as Size_Warnings
    from backlog
    group by file_date;
quit;

/* Send an email with backlog details */
filename mail email 'your_email@domain.com'
    subject="Folder & File Check Report - Last 45 Days"
    type="text/html";

data _null_;
    file mail;
    put '<html><body>';
    put '<h2>Folder & File Check Report - Last 45 Days (T-0 to T-44)</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folder Status</th><th>File Status</th><th>File Size (bytes)</th></tr>';
    
    do until (eof);
        set backlog end=eof;
        put "<tr><td>" file_date "</td><td>" folder_status "</td><td>" file_status "</td><td>" file_size "</td></tr>";
    end;
    
    put '</table>';
    
    put '<h2>Summary</h2>';
    put '<table border="1"><tr><th>Date</th><th>Folders Exist</th><th>Folders Missing</th><th>Valid Files</th><th>Missing Files</th><th>Corrupt Files</th><th>Size Warnings</th></tr>';
    
    do until (eof2);
        set summary end=eof2;
        put "<tr><td>" file_date "</td><td>" Folders_Exist "</td><td>" Folders_Missing "</td><td>" Valid_Files "</td><td>" Missing_Files "</td><td>" Corrupt_Files "</td><td>" Size_Warnings "</td></tr>";
    end;
    
    put '</table></body></html>';
run;
