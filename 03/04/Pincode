import pandas as pd
import numpy as np
import plotly.graph_objects as go

# Load the data
df_city_level = pd.read_excel(r'C:\Users\45331629\Documents\NppScripts\city.xlsx')

# Calculate mean and max values
df_city_level['CASA_TD_Deposits_mean'] = df_city_level['CASA_TD_Deposits'].mean()
df_city_level['HML_SNC_AMT_mean'] = df_city_level['HML_SNC_AMT'].mean()
df_city_level['EA_TRADE_perc_mean'] = df_city_level['EA_TRADE_perc'].mean()

df_city_level['CASA_TD_Deposits_max'] = df_city_level['CASA_TD_Deposits'].max()
df_city_level['HML_SNC_AMT_max'] = df_city_level['HML_SNC_AMT'].max()
df_city_level['EA_TRADE_perc_max'] = df_city_level['EA_TRADE_perc'].max()

# Define the city of interest
city = 'LUCKNOW'
df_city_level1 = df_city_level[df_city_level["City"] == city]

# Create mortgage amount bar chart
fig_mtg_city = go.Figure(
    data=[
        go.Bar(
            name=f"{city}",
            y=df_city_level1["City"],
            x=df_city_level1["HML_SNC_AMT"],
            offsetgroup=2,
            orientation='h',
            marker_color="#18b8c2",
            width=[0.2]
        ),
        go.Bar(
            name="Mean(ALL Cities)",
            y=df_city_level1["City"],
            x=df_city_level1["HML_SNC_AMT_mean"],
            offsetgroup=1,
            orientation='h',
            marker_color="#6eba6e",
            width=[0.2]
        ),
        go.Bar(
            name="Max(ALL Cities)",
            y=df_city_level1["City"],
            x=df_city_level1["HML_SNC_AMT_max"],
            offsetgroup=0,
            orientation='h',
            marker_color="#f8b732",
            width=[0.2]
        )
    ]
)

# Update layout for mortgage amount chart
fig_mtg_city.update_layout(
    title="Mortgage Amount",
    font=dict(size=10, color="white"),
    plot_bgcolor="#222222",
    paper_bgcolor="#222222",
    xaxis=dict(showgrid=False, showline=False, zeroline=False, color="white"),
    yaxis=dict(showgrid=False, showline=False, zeroline=False, color="white", showticklabels=False),
    barmode='stack',
    bargap=0,
    bargroupgap=0
)

# Create CASA TD Deposits bar chart
fig_casa_city = go.Figure(
    data=[
        go.Bar(
            name=f"{city}",
            y=df_city_level["City"],
            x=df_city_level["CASA_TD_Deposits"],
            offsetgroup=2,
            orientation='h',
            marker_color="#18b8c2",
            width=[0.2]
        ),
        go.Bar(
            name="Mean(ALL Cities)",
            y=df_city_level["City"],
            x=df_city_level["CASA_TD_Deposits_mean"],
            offsetgroup=1,
            orientation='h',
            marker_color="#6eba6e",
            width=[0.2]
        ),
        go.Bar(
            name="Max(ALL Cities)",
            y=df_city_level["City"],
            x=df_city_level["CASA_TD_Deposits_max"],
            offsetgroup=0,
            orientation='h',
            marker_color="#087b22",
            width=[0.2]
        )
    ]
)

# Update layout for CASA TD Deposits chart
fig_casa_city.update_layout(
    title="CASA & TD Amount",
    font=dict(size=10, color="white"),
    plot_bgcolor="#222222",
    paper_bgcolor="#222222",
    xaxis=dict(showgrid=False, showline=False, zeroline=False, color="white"),
    yaxis=dict(showgrid=False, showline=False, zeroline=False, color="white", showticklabels=False),
    margin=dict(t=30, b=5, l=0, r=0),
    height=110,
    barmode='stack',
    bargap=0,
    bargroupgap=0,
    showlegend=False
)

# Create EA Trade percentage bar chart
fig_eat_city = go.Figure(
    data=[
        go.Bar(
            name=f"{city}",
            y=df_city_level1["City"],
            x=df_city_level1["EA_TRADE_perc"],
            offsetgroup=2,
            orientation='h',
            marker_color="#18b8c2",
            width=[0.2]
        ),
        go.Bar(
            name="Mean(ALL Cities)",
            y=df_city_level1["City"],
            x=df_city_level1["EA_TRADE_perc_mean"],
            offsetgroup=1,
            orientation='h',
            marker_color="#6eba6e",
            width=[0.2]
        ),
        go.Bar(
            name="Max(ALL Cities)",
            y=df_city_level1["City"],
            x=df_city_level1["EA_TRADE_perc_max"],
            offsetgroup=0,
            orientation='h',
            marker_color="#087b22",
            width=[0.2]
        )
    ]
)

# Update layout for EA Trade percentage chart
fig_eat_city.update_layout(
    title="Emerging Affluent Percentage",
    font=dict(size=10, color="white"),
    plot_bgcolor="#222222",
    paper_bgcolor="#222222",
    xaxis=dict(showgrid=False, showline=False, zeroline=False, color="white", tickformat='.0%', range=[0, 0.2]),
    yaxis=dict(showgrid=False, showline=False, zeroline=False, color="white", showticklabels=False),
    margin=dict(t=30, b=5, l=0, r=0),
    height=110,
    barmode='stack',
    bargap=0,
    bargroupgap=0,
    showlegend=False
)

# Display the figures
fig_mtg_city.show()
fig_casa_city.show()
fig_eat_city.show()










import requests
from bs4 import BeautifulSoup
import pandas as pd
import time
import random
from tqdm import tqdm  # For progress bar

def google_search_scrape(query):
    """
    Scrape Google search results for a given query.
    Returns a list of snippets containing relevant text.
    """
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
        }
        # Construct the Google search URL
        search_url = f"https://www.google.com/search?q={query.replace(' ', '+')}"
        
        # Send the GET request
        response = requests.get(search_url, headers=headers)
        response.raise_for_status()  # Raise an error for bad status codes

        # Parse the HTML content
        soup = BeautifulSoup(response.text, "html.parser")
        
        # Extract snippets from search results
        snippets = []
        for g in soup.find_all('div', class_='BNeawe s3v9rd AP7Wnd'):
            snippets.append(g.text)

        return snippets[:10]  # Return the first 10 snippets
    except Exception as e:
        print(f"Error during Google scraping: {e}")
        return []

def fetch_land_price_data_scrape(pincode, area, state):
    """
    Query Google for land price data using web scraping.
    """
    try:
        query = f"land price per square foot {area} {state} {pincode}"
        snippets = google_search_scrape(query)
        
        # Extract potential price information
        prices = []
        for snippet in snippets:
            for word in snippet.split():
                if '₹' in word or 'Rs' in word:
                    try:
                        price = float(word.replace('₹', '').replace('Rs', '').replace(',', '').strip())
                        prices.append(price)
                    except ValueError:
                        continue
        return prices
    except Exception as e:
        print(f"Error fetching land price data for {pincode}: {e}")
        return []

def calculate_percentiles(prices):
    """
    Calculate percentiles for a list of prices.
    """
    if not prices:
        return None, None, None
    median = pd.Series(prices).quantile(0.5)
    seventy_fifth = pd.Series(prices).quantile(0.75)
    maximum = max(prices)
    return median, seventy_fifth, maximum

def main():
    # Sample pincode and area data
    data = [
        {"Pincode": "110001", "Area": "Connaught Place", "State": "Delhi"},
        {"Pincode": "400001", "Area": "Nariman Point", "State": "Maharashtra"},
        {"Pincode": "560001", "Area": "MG Road", "State": "Karnataka"}
    ]

    results = []

    # Use tqdm for the progress bar
    print("Fetching data...")
    for entry in tqdm(data, desc="Progress", unit="entry"):
        pincode = entry['Pincode']
        area = entry['Area']
        state = entry['State']

        # Fetch land price data using Google search scraping
        prices = fetch_land_price_data_scrape(pincode, area, state)

        # Calculate percentiles
        median, seventy_fifth, maximum = calculate_percentiles(prices)

        # Append results
        results.append({
            "Pincode": pincode,
            "Area": area,
            "State": state,
            "Median Price per Sqft": median,
            "75th Percentile Price per Sqft": seventy_fifth,
            "Maximum Price per Sqft": maximum
        })

        # Introduce a random delay to mimic human behavior
        time.sleep(random.randint(2, 5))

    # Create DataFrame from results
    results_df = pd.DataFrame(results)

    # Save to CSV
    results_df.to_csv('google_scraped_land_prices.csv', index=False)
    print("\nData saved to google_scraped_land_prices.csv")

if __name__ == "__main__":
    main()
