Sub SplitDataByBranch_WithFreezeAndLock()

    Dim ws As Worksheet
    Dim lastRow As Long
    Dim branchDict As Object
    Dim branchName As Variant
    Dim basePath As String
    Dim headerRange As Range
    Dim r As Long

    Set ws = ThisWorkbook.Sheets(1)
    lastRow = ws.Cells(ws.Rows.Count, "F").End(xlUp).Row
    Set headerRange = ws.Range("A1:V1") ' Export columns A to V

    Set branchDict = CreateObject("Scripting.Dictionary")

    ' Collect unique Branch names from Column F
    For r = 2 To lastRow
        branchName = Trim(ws.Cells(r, 6).Value) ' Column F
        If Len(branchName) > 0 Then
            If Not branchDict.exists(branchName) Then
                branchDict.Add branchName, Nothing
            End If
        End If
    Next r

    ' Ask user for base folder
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Select Main Folder to Save Branch Folders"
        If .Show <> -1 Then
            MsgBox "No folder selected. Exiting.", vbExclamation
            Exit Sub
        End If
        basePath = .SelectedItems(1) & "\"
    End With

    ' Loop through each Branch
    For Each branchName In branchDict.Keys

        ' Clean folder/file name
        Dim cleanName As String
        cleanName = Replace(branchName, "/", "_")
        cleanName = Replace(cleanName, "\", "_")
        cleanName = Replace(cleanName, "*", "_")
        cleanName = Replace(cleanName, "?", "_")
        cleanName = Replace(cleanName, ":", "_")
        cleanName = Replace(cleanName, "[", "_")
        cleanName = Replace(cleanName, "]", "_")

        ' Create branch folder
        Dim branchFolder As String
        branchFolder = basePath & cleanName & "\"
        If Dir(branchFolder, vbDirectory) = "" Then MkDir branchFolder

        ' New workbook creation
        Dim newWB As Workbook
        Set newWB = Workbooks.Add

        ' Copy header row
        headerRange.Copy Destination:=newWB.Sheets(1).Range("A1")
        Dim pasteRow As Long: pasteRow = 2

        ' Copy branch-specific data rows
        For r = 2 To lastRow
            If Trim(ws.Cells(r, 6).Value) = branchName Then
                ws.Range("A" & r & ":V" & r).Copy _
                    Destination:=newWB.Sheets(1).Range("A" & pasteRow)
                pasteRow = pasteRow + 1
            End If
        Next r

        ' Freeze A to D, lock A to Q
        With newWB.Sheets(1)
            .Activate
            .Range("E2").Select
            ActiveWindow.FreezePanes = True

            .Cells.Locked = False
            .Range("A:Q").Locked = True

            .Protect Password:="view123", UserInterfaceOnly:=True, AllowFiltering:=True
        End With

        ' Save file
        Dim filePath As String
        filePath = branchFolder & cleanName & "_Records.xlsx"

        Application.DisplayAlerts = False
        newWB.SaveAs fileName:=filePath, Password:="hsbc123@"
        Application.DisplayAlerts = True

        newWB.Close SaveChanges:=False

    Next branchName

    MsgBox "All branch files created successfully with password protection and locked structure.", vbInformation

End Sub


















Sub SplitDataByRM_WithFoldersAndPassword()

    Dim ws As Worksheet
    Dim lastRow As Long
    Dim rmDict As Object
    Dim rmName As Variant
    Dim basePath As String
    Dim headerRange As Range
    Dim r As Long

    Set ws = ThisWorkbook.Sheets(1) ' Use your main sheet
    lastRow = ws.Cells(ws.Rows.Count, "F").End(xlUp).Row
    Set headerRange = ws.Range("C1:H1") ' Copy columns C to H

    Set rmDict = CreateObject("Scripting.Dictionary")

    ' Get all unique RM names
    For r = 2 To lastRow
        rmName = Trim(ws.Cells(r, 6).Value) ' Column F
        If Len(rmName) > 0 Then
            If Not rmDict.exists(rmName) Then
                rmDict.Add rmName, Nothing
            End If
        End If
    Next r

    ' Ask where to save the main folder
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Select Main Folder to Save RM Folders"
        If .Show <> -1 Then
            MsgBox "No folder selected. Exiting.", vbExclamation
            Exit Sub
        End If
        basePath = .SelectedItems(1) & "\"
    End With

    ' Loop through RMs
    For Each rmName In rmDict.Keys

        ' Clean RM name
        Dim cleanName As String
        cleanName = Replace(rmName, "/", "_")
        cleanName = Replace(cleanName, "\", "_")
        cleanName = Replace(cleanName, "*", "_")
        cleanName = Replace(cleanName, "?", "_")
        cleanName = Replace(cleanName, ":", "_")
        cleanName = Replace(cleanName, "[", "_")
        cleanName = Replace(cleanName, "]", "_")

        ' Create folder for this RM
        Dim rmFolder As String
        rmFolder = basePath & cleanName & "\"
        If Dir(rmFolder, vbDirectory) = "" Then MkDir rmFolder

        ' Create new workbook
        Dim newWB As Workbook
        Set newWB = Workbooks.Add

        ' Copy header
        headerRange.Copy Destination:=newWB.Sheets(1).Range("A1")
        Dim pasteRow As Long: pasteRow = 2

        ' Copy data
        For r = 2 To lastRow
            If Trim(ws.Cells(r, 6).Value) = rmName Then
                ws.Range("C" & r & ":H" & r).Copy _
                    Destination:=newWB.Sheets(1).Range("A" & pasteRow)
                pasteRow = pasteRow + 1
            End If
        Next r

        ' Save file inside RM's folder
        Dim filePath As String
        filePath = rmFolder & cleanName & "_Records.xlsx"

        Application.DisplayAlerts = False
        newWB.SaveAs fileName:=filePath, Password:="hsbc123@"
        Application.DisplayAlerts = True

        newWB.Close SaveChanges:=False

    Next rmName

    MsgBox "All files created in separate folders with password: hsbc123@", vbInformation

End Sub









proc sort data=your_dataset; 
    by cust_id; 
run;

data updated_data;
    set your_dataset;
    by cust_id;

    /* Keep card_count only in first record */
    if first.cust_id then card_count_new = card_count;
    else card_count_new = .;

    drop card_count;
    rename card_count_new = card_count;
run;











/* Step 1: Get max LAST_TRN_DATE and max MONTH_KEY per customer */
proc sql;
    create table cust_summary as
    select 
        cust_id,
        max(input(put(last_trn_date, 8.), yymmdd8.)) as max_trn_dt format=date9.,
        max(month_key) as max_month_key
    from your_dataset
    group by cust_id;
quit;

/* Step 2: Sort both tables for merging */
proc sort data=your_dataset; by cust_id; run;
proc sort data=cust_summary; by cust_id; run;

/* Step 3: Merge and create all 3 flags */
data final_flagged_data;
    merge your_dataset (in=a)
          cust_summary (in=b);
    by cust_id;

    /* Convert ACCT_OPN_DT to SAS date */
    acct_opn_dt_sas = input(put(acct_opn_dt, 8.), yymmdd8.);

    /* ------------------ FLAG 1: ACTIVITY DURATION FLAG ------------------ */
    active_months = intck('month', acct_opn_dt_sas, max_trn_dt);
    if active_months < 1 then act_flag = '<1M';
    else if active_months < 3 then act_flag = '<3M';
    else if active_months < 6 then act_flag = '<6M';
    else act_flag = '>=6M';

    /* ------------------ FLAG 2: NEW ACQUISITION ------------------ */
    if '01APR2025'd <= acct_opn_dt_sas <= '30APR2025'd then new_acq_flag = 'YES';
    else new_acq_flag = 'NO';

    /* ------------------ FLAG 3: ACCOUNT CLOSED ------------------ */
    if max_trn_dt < '01MAR2025'd and max_month_key < 202503 then acct_closed_flag = 'YES';
    else acct_closed_flag = 'NO';

run;










/* Step 1: Get Max LAST_TRN_DATE per Customer */
proc sql;
    create table cust_last_trn as
    select 
        cust_id,
        max(input(put(last_trn_date, 8.), yymmdd8.)) as max_trn_dt format=date9.
    from your_dataset
    where last_trn_date ne .
    group by cust_id;
quit;

/* Step 2: Sort both tables by cust_id */
proc sort data=your_dataset; 
    by cust_id; 
run;

proc sort data=cust_last_trn; 
    by cust_id; 
run;

/* Step 3: Merge and retain all fields with the new activity flag */
data with_flag;
    merge your_dataset (in=a) 
          cust_last_trn (in=b);
    by cust_id;

    /* Convert account open date to SAS date format */
    acct_opn_dt_sas = input(put(acct_opn_dt, 8.), yymmdd8.);

    /* Calculate active months between account open and max transaction date */
    active_months = intck('month', acct_opn_dt_sas, max_trn_dt);

    /* Categorize into flags */
    if active_months < 1 then act_flag = '<1M';
    else if active_months < 3 then act_flag = '<3M';
    else if active_months < 6 then act_flag = '<6M';
    else act_flag = '>=6M';
run;






Sub PasswordProtectAllFiles()

    Dim folderPath As String
    Dim fileName As String
    Dim wb As Workbook
    Dim password As String
    
    ' Set the folder path (with trailing backslash)
    folderPath = "C:\Your\Folder\Path\"
    
    ' Set the password to apply
    password = "hsbc123@"
    
    ' Loop through all Excel files in the folder
    fileName = Dir(folderPath & "*.xls*")
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Do While fileName <> ""
        ' Open workbook
        Set wb = Workbooks.Open(folderPath & fileName)
        
        ' Save with password protection
        wb.SaveAs _
            Filename:=folderPath & fileName, _
            FileFormat:=xlOpenXMLWorkbook, _
            Password:=password
        
        wb.Close SaveChanges:=False
        fileName = Dir
    Loop

    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    MsgBox "All files password-protected successfully.", vbInformation

End Sub